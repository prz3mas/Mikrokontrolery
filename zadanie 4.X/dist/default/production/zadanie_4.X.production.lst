

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu May 21 18:23:52 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39  0000                     
    40                           ; Version 2.05
    41                           ; Generated 20/12/2018 GMT
    42                           ; 
    43                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4620 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     _TRISE	set	3990
    75  0000                     _TRISD	set	3989
    76  0000                     _TRISC	set	3988
    77  0000                     _TRISB	set	3987
    78  0000                     _TRISA	set	3986
    79  0000                     _ADCON2	set	4032
    80  0000                     _ADCON1	set	4033
    81  0000                     _PORTBbits	set	3969
    82  0000                     _PORTEbits	set	3972
    83  0000                     _PORTD	set	3971
    84  0000                     _ADRESL	set	4035
    85  0000                     _ADRESH	set	4036
    86  0000                     _ADCON0bits	set	4034
    87  0000                     _ADCON0	set	4034
    88                           
    89                           	psect	smallconst
    90  001000                     __psmallconst:
    91                           	opt callstack 0
    92  001000  00                 	db	0
    93  001001                     STR_1:
    94  001001  20                 	db	32
    95  001002  20                 	db	32
    96  001003  20                 	db	32
    97  001004  20                 	db	32
    98  001005  25                 	db	37
    99  001006  30                 	db	48	;'0'
   100  001007  32                 	db	50	;'2'
   101  001008  69                 	db	105	;'i'
   102  001009  3A                 	db	58	;':'
   103  00100A  25                 	db	37
   104  00100B  30                 	db	48	;'0'
   105  00100C  32                 	db	50	;'2'
   106  00100D  69                 	db	105	;'i'
   107  00100E  20                 	db	32
   108  00100F  20                 	db	32
   109  001010  20                 	db	32
   110  001011  20                 	db	32
   111  001012  20                 	db	32
   112  001013  20                 	db	32
   113  001014  20                 	db	32
   114  001015  20                 	db	32
   115  001016  20                 	db	32
   116  001017  20                 	db	32
   117  001018  20                 	db	32
   118  001019  20                 	db	32
   119  00101A  00                 	db	0
   120  00101B                     STR_4:
   121  00101B  57                 	db	87	;'W'
   122  00101C  79                 	db	121	;'y'
   123  00101D  6A                 	db	106	;'j'
   124  00101E  6D                 	db	109	;'m'
   125  00101F  6E                 	db	110	;'n'
   126  001020  69                 	db	105	;'i'
   127  001021  6A                 	db	106	;'j'
   128  001022  20                 	db	32
   129  001023  72                 	db	114	;'r'
   130  001024  7A                 	db	122	;'z'
   131  001025  61                 	db	97	;'a'
   132  001026  72                 	db	114	;'r'
   133  001027  63                 	db	99	;'c'
   134  001028  69                 	db	105	;'i'
   135  001029  65                 	db	101	;'e'
   136  00102A  20                 	db	32
   137  00102B  20                 	db	32
   138  00102C  20                 	db	32
   139  00102D  20                 	db	32
   140  00102E  20                 	db	32
   141  00102F  20                 	db	32
   142  001030  20                 	db	32
   143  001031  00                 	db	0
   144  001032                     STR_3:
   145  001032  4B                 	db	75	;'K'
   146  001033  6F                 	db	111	;'o'
   147  001034  6E                 	db	110	;'n'
   148  001035  69                 	db	105	;'i'
   149  001036  65                 	db	101	;'e'
   150  001037  63                 	db	99	;'c'
   151  001038  20                 	db	32
   152  001039  7A                 	db	122	;'z'
   153  00103A  61                 	db	97	;'a'
   154  00103B  62                 	db	98	;'b'
   155  00103C  61                 	db	97	;'a'
   156  00103D  77                 	db	119	;'w'
   157  00103E  79                 	db	121	;'y'
   158  00103F  20                 	db	32
   159  001040  20                 	db	32
   160  001041  20                 	db	32
   161  001042  20                 	db	32
   162  001043  20                 	db	32
   163  001044  20                 	db	32
   164  001045  20                 	db	32
   165  001046  20                 	db	32
   166  001047  00                 	db	0
   167  001048                     STR_6:
   168  001048  43                 	db	67	;'C'
   169  001049  7A                 	db	122	;'z'
   170  00104A  61                 	db	97	;'a'
   171  00104B  73                 	db	115	;'s'
   172  00104C  20                 	db	32
   173  00104D  67                 	db	103	;'g'
   174  00104E  72                 	db	114	;'r'
   175  00104F  7A                 	db	122	;'z'
   176  001050  61                 	db	97	;'a'
   177  001051  6E                 	db	110	;'n'
   178  001052  69                 	db	105	;'i'
   179  001053  61                 	db	97	;'a'
   180  001054  3A                 	db	58	;':'
   181  001055  20                 	db	32
   182  001056  20                 	db	32
   183  001057  20                 	db	32
   184  001058  20                 	db	32
   185  001059  20                 	db	32
   186  00105A  20                 	db	32
   187  00105B  20                 	db	32
   188  00105C  00                 	db	0
   189  00105D                     STR_7:
   190  00105D  57                 	db	87	;'W'
   191  00105E  79                 	db	121	;'y'
   192  00105F  62                 	db	98	;'b'
   193  001060  69                 	db	105	;'i'
   194  001061  65                 	db	101	;'e'
   195  001062  72                 	db	114	;'r'
   196  001063  7A                 	db	122	;'z'
   197  001064  20                 	db	32
   198  001065  6D                 	db	109	;'m'
   199  001066  6F                 	db	111	;'o'
   200  001067  63                 	db	99	;'c'
   201  001068  3A                 	db	58	;':'
   202  001069  20                 	db	32
   203  00106A  20                 	db	32
   204  00106B  20                 	db	32
   205  00106C  20                 	db	32
   206  00106D  20                 	db	32
   207  00106E  20                 	db	32
   208  00106F  20                 	db	32
   209  001070  00                 	db	0
   210  001071                     STR_11:
   211  001071  20                 	db	32
   212  001072  20                 	db	32
   213  001073  20                 	db	32
   214  001074  20                 	db	32
   215  001075  32                 	db	50	;'2'
   216  001076  30                 	db	48	;'0'
   217  001077  30                 	db	48	;'0'
   218  001078  20                 	db	32
   219  001079  57                 	db	87	;'W'
   220  00107A  20                 	db	32
   221  00107B  20                 	db	32
   222  00107C  20                 	db	32
   223  00107D  20                 	db	32
   224  00107E  20                 	db	32
   225  00107F  20                 	db	32
   226  001080  20                 	db	32
   227  001081  00                 	db	0
   228  001082                     STR_9:
   229  001082  20                 	db	32
   230  001083  20                 	db	32
   231  001084  20                 	db	32
   232  001085  20                 	db	32
   233  001086  36                 	db	54	;'6'
   234  001087  30                 	db	48	;'0'
   235  001088  30                 	db	48	;'0'
   236  001089  20                 	db	32
   237  00108A  57                 	db	87	;'W'
   238  00108B  20                 	db	32
   239  00108C  20                 	db	32
   240  00108D  20                 	db	32
   241  00108E  20                 	db	32
   242  00108F  20                 	db	32
   243  001090  20                 	db	32
   244  001091  20                 	db	32
   245  001092  00                 	db	0
   246  001093                     STR_8:
   247  001093  20                 	db	32
   248  001094  20                 	db	32
   249  001095  20                 	db	32
   250  001096  20                 	db	32
   251  001097  38                 	db	56	;'8'
   252  001098  30                 	db	48	;'0'
   253  001099  30                 	db	48	;'0'
   254  00109A  20                 	db	32
   255  00109B  57                 	db	87	;'W'
   256  00109C  20                 	db	32
   257  00109D  20                 	db	32
   258  00109E  20                 	db	32
   259  00109F  20                 	db	32
   260  0010A0  20                 	db	32
   261  0010A1  20                 	db	32
   262  0010A2  20                 	db	32
   263  0010A3  00                 	db	0
   264  0010A4                     STR_10:
   265  0010A4  20                 	db	32
   266  0010A5  20                 	db	32
   267  0010A6  20                 	db	32
   268  0010A7  20                 	db	32
   269  0010A8  33                 	db	51	;'3'
   270  0010A9  35                 	db	53	;'5'
   271  0010AA  30                 	db	48	;'0'
   272  0010AB  20                 	db	32
   273  0010AC  57                 	db	87	;'W'
   274  0010AD  20                 	db	32
   275  0010AE  20                 	db	32
   276  0010AF  20                 	db	32
   277  0010B0  20                 	db	32
   278  0010B1  20                 	db	32
   279  0010B2  20                 	db	32
   280  0010B3  20                 	db	32
   281  0010B4  00                 	db	0
   282  0010B5                     STR_2:
   283  0010B5  47                 	db	71	;'G'
   284  0010B6  72                 	db	114	;'r'
   285  0010B7  7A                 	db	122	;'z'
   286  0010B8  61                 	db	97	;'a'
   287  0010B9  6E                 	db	110	;'n'
   288  0010BA  69                 	db	105	;'i'
   289  0010BB  65                 	db	101	;'e'
   290  0010BC  3A                 	db	58	;':'
   291  0010BD  20                 	db	32
   292  0010BE  20                 	db	32
   293  0010BF  20                 	db	32
   294  0010C0  20                 	db	32
   295  0010C1  20                 	db	32
   296  0010C2  20                 	db	32
   297  0010C3  20                 	db	32
   298  0010C4  00                 	db	0
   299  0000                     
   300                           ; #config settings
   301  0010C5  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  001FF8                     __pcinit:
   305                           	opt callstack 0
   306  001FF8                     start_initialization:
   307                           	opt callstack 0
   308  001FF8                     __initialization:
   309                           	opt callstack 0
   310                           
   311                           ; Clear objects allocated to BANK0 (32 bytes)
   312  001FF8  EE00  F0C4         	lfsr	0,__pbssBANK0
   313  001FFC  0E20               	movlw	32
   314  001FFE                     clear_0:
   315  001FFE  6AEE               	clrf	postinc0,c
   316  002000  06E8               	decf	wreg,f,c
   317  002002  E1FD               	bnz	clear_0
   318                           
   319                           ; Clear objects allocated to COMRAM (8 bytes)
   320  002004  EE00  F074         	lfsr	0,__pbssCOMRAM
   321  002008  0E08               	movlw	8
   322  00200A                     clear_1:
   323  00200A  6AEE               	clrf	postinc0,c
   324  00200C  06E8               	decf	wreg,f,c
   325  00200E  E1FD               	bnz	clear_1
   326  002010                     end_of_initialization:
   327                           	opt callstack 0
   328  002010                     __end_of__initialization:
   329                           	opt callstack 0
   330  002010  0E00               	movlw	low (__Lmediumconst shr (0+16))
   331  002012  6EF8               	movwf	tblptru,c
   332  002014  0100               	movlb	0
   333  002016  EF52  F00F         	goto	_main	;jump to C main() function
   334                           
   335                           	psect	bssCOMRAM
   336  000074                     __pbssCOMRAM:
   337                           	opt callstack 0
   338  000074                     _nout:
   339                           	opt callstack 0
   340  000074                     	ds	2
   341  000076                     _width:
   342                           	opt callstack 0
   343  000076                     	ds	2
   344  000078                     _prec:
   345                           	opt callstack 0
   346  000078                     	ds	2
   347  00007A                     _flags:
   348                           	opt callstack 0
   349  00007A                     	ds	2
   350                           
   351                           	psect	bssBANK0
   352  0000C4                     __pbssBANK0:
   353                           	opt callstack 0
   354  0000C4                     _dbuf:
   355                           	opt callstack 0
   356  0000C4                     	ds	32
   357                           
   358                           	psect	cstackBANK0
   359  000080                     __pcstackBANK0:
   360                           	opt callstack 0
   361  000080                     count@buffer:
   362                           	opt callstack 0
   363                           
   364                           ; 32 bytes @ 0x0
   365  000080                     	ds	32
   366  0000A0                     time@buffer:
   367                           	opt callstack 0
   368                           
   369                           ; 32 bytes @ 0x20
   370  0000A0                     	ds	32
   371  0000C0                     time@a:
   372                           	opt callstack 0
   373                           
   374                           ; 2 bytes @ 0x40
   375  0000C0                     	ds	2
   376  0000C2                     time@b:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0x42
   380  0000C2                     	ds	2
   381                           
   382                           	psect	cstackCOMRAM
   383  000001                     __pcstackCOMRAM:
   384                           	opt callstack 0
   385  000001                     ?_strlen:
   386                           	opt callstack 0
   387  000001                     ?_isdigit:
   388                           	opt callstack 0
   389  000001                     ?_isspace:
   390                           	opt callstack 0
   391  000001                     ?___wmul:
   392                           	opt callstack 0
   393  000001                     ?___aodiv:
   394                           	opt callstack 0
   395  000001                     ?___aomod:
   396                           	opt callstack 0
   397  000001                     lcd_wr@val:
   398                           	opt callstack 0
   399  000001                     delay@ms:
   400                           	opt callstack 0
   401  000001                     ___wmul@multiplier:
   402                           	opt callstack 0
   403  000001                     isdigit@c:
   404                           	opt callstack 0
   405  000001                     isspace@c:
   406                           	opt callstack 0
   407  000001                     fputc@c:
   408                           	opt callstack 0
   409  000001                     strlen@s:
   410                           	opt callstack 0
   411  000001                     ___aodiv@dividend:
   412                           	opt callstack 0
   413  000001                     ___aomod@dividend:
   414                           	opt callstack 0
   415                           
   416                           ; 8 bytes @ 0x0
   417  000001                     	ds	1
   418  000002                     lcd_cmd@val:
   419                           	opt callstack 0
   420  000002                     lcd_dat@val:
   421                           	opt callstack 0
   422                           
   423                           ; 1 bytes @ 0x1
   424  000002                     	ds	1
   425  000003                     ??_isdigit:
   426  000003                     ??_isspace:
   427  000003                     delay@i:
   428                           	opt callstack 0
   429  000003                     lcd_str@str:
   430                           	opt callstack 0
   431  000003                     ___wmul@multiplicand:
   432                           	opt callstack 0
   433  000003                     fputc@fp:
   434                           	opt callstack 0
   435  000003                     strlen@a:
   436                           	opt callstack 0
   437                           
   438                           ; 2 bytes @ 0x2
   439  000003                     	ds	2
   440  000005                     ??_fputc:
   441  000005                     ??_lcd_str:
   442  000005                     delay@j:
   443                           	opt callstack 0
   444  000005                     ___wmul@product:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x4
   448  000005                     	ds	1
   449  000006                     
   450                           ; 1 bytes @ 0x5
   451  000006                     	ds	1
   452  000007                     lcd_str@i:
   453                           	opt callstack 0
   454  000007                     _isspace$888:
   455                           	opt callstack 0
   456                           
   457                           ; 1 bytes @ 0x6
   458  000007                     	ds	1
   459  000008                     ?_atoi:
   460                           	opt callstack 0
   461  000008                     atoi@s:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0x7
   465  000008                     	ds	1
   466  000009                     ___aodiv@divisor:
   467                           	opt callstack 0
   468  000009                     ___aomod@divisor:
   469                           	opt callstack 0
   470                           
   471                           ; 8 bytes @ 0x8
   472  000009                     	ds	1
   473  00000A                     ??_atoi:
   474  00000A                     fputs@s:
   475                           	opt callstack 0
   476                           
   477                           ; 2 bytes @ 0x9
   478  00000A                     	ds	2
   479  00000C                     fputs@fp:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0xB
   483  00000C                     	ds	2
   484  00000E                     fputs@c:
   485                           	opt callstack 0
   486  00000E                     atoi@neg:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0xD
   490  00000E                     	ds	1
   491  00000F                     fputs@i:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0xE
   495  00000F                     	ds	1
   496  000010                     _atoi$870:
   497                           	opt callstack 0
   498                           
   499                           ; 2 bytes @ 0xF
   500  000010                     	ds	1
   501  000011                     ?_pad:
   502                           	opt callstack 0
   503  000011                     ___aodiv@counter:
   504                           	opt callstack 0
   505  000011                     ___aomod@counter:
   506                           	opt callstack 0
   507  000011                     pad@fp:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x10
   511  000011                     	ds	1
   512  000012                     ___aodiv@sign:
   513                           	opt callstack 0
   514  000012                     ___aomod@sign:
   515                           	opt callstack 0
   516  000012                     _atoi$872:
   517                           	opt callstack 0
   518                           
   519                           ; 2 bytes @ 0x11
   520  000012                     	ds	1
   521  000013                     ?_abs:
   522                           	opt callstack 0
   523  000013                     pad@buf:
   524                           	opt callstack 0
   525  000013                     abs@a:
   526                           	opt callstack 0
   527  000013                     ___aodiv@quotient:
   528                           	opt callstack 0
   529                           
   530                           ; 8 bytes @ 0x12
   531  000013                     	ds	1
   532  000014                     _atoi$871:
   533                           	opt callstack 0
   534                           
   535                           ; 1 bytes @ 0x13
   536  000014                     	ds	1
   537  000015                     ??_abs:
   538  000015                     pad@p:
   539                           	opt callstack 0
   540  000015                     atoi@n:
   541                           	opt callstack 0
   542                           
   543                           ; 2 bytes @ 0x14
   544  000015                     	ds	2
   545  000017                     ??_pad:
   546                           
   547                           ; 1 bytes @ 0x16
   548  000017                     	ds	1
   549  000018                     pad@i:
   550                           	opt callstack 0
   551                           
   552                           ; 2 bytes @ 0x17
   553  000018                     	ds	2
   554  00001A                     pad@w:
   555                           	opt callstack 0
   556                           
   557                           ; 2 bytes @ 0x19
   558  00001A                     	ds	2
   559  00001C                     ?_dtoa:
   560                           	opt callstack 0
   561  00001C                     dtoa@fp:
   562                           	opt callstack 0
   563                           
   564                           ; 2 bytes @ 0x1B
   565  00001C                     	ds	2
   566  00001E                     dtoa@d:
   567                           	opt callstack 0
   568                           
   569                           ; 8 bytes @ 0x1D
   570  00001E                     	ds	8
   571  000026                     ??_dtoa:
   572                           
   573                           ; 1 bytes @ 0x25
   574  000026                     	ds	8
   575  00002E                     _dtoa$398:
   576                           	opt callstack 0
   577                           
   578                           ; 2 bytes @ 0x2D
   579  00002E                     	ds	2
   580  000030                     dtoa@p:
   581                           	opt callstack 0
   582                           
   583                           ; 2 bytes @ 0x2F
   584  000030                     	ds	2
   585  000032                     dtoa@w:
   586                           	opt callstack 0
   587                           
   588                           ; 2 bytes @ 0x31
   589  000032                     	ds	2
   590  000034                     dtoa@s:
   591                           	opt callstack 0
   592                           
   593                           ; 2 bytes @ 0x33
   594  000034                     	ds	2
   595  000036                     dtoa@n:
   596                           	opt callstack 0
   597                           
   598                           ; 8 bytes @ 0x35
   599  000036                     	ds	8
   600  00003E                     dtoa@i:
   601                           	opt callstack 0
   602                           
   603                           ; 2 bytes @ 0x3D
   604  00003E                     	ds	2
   605  000040                     ?_vfpfcnvrt:
   606                           	opt callstack 0
   607  000040                     vfpfcnvrt@fp:
   608                           	opt callstack 0
   609                           
   610                           ; 2 bytes @ 0x3F
   611  000040                     	ds	2
   612  000042                     vfpfcnvrt@fmt:
   613                           	opt callstack 0
   614                           
   615                           ; 2 bytes @ 0x41
   616  000042                     	ds	2
   617  000044                     vfpfcnvrt@ap:
   618                           	opt callstack 0
   619                           
   620                           ; 2 bytes @ 0x43
   621  000044                     	ds	2
   622  000046                     ??_vfpfcnvrt:
   623                           
   624                           ; 1 bytes @ 0x45
   625  000046                     	ds	4
   626  00004A                     vfpfcnvrt@ll:
   627                           	opt callstack 0
   628                           
   629                           ; 8 bytes @ 0x49
   630  00004A                     	ds	8
   631  000052                     vfpfcnvrt@done:
   632                           	opt callstack 0
   633                           
   634                           ; 2 bytes @ 0x51
   635  000052                     	ds	2
   636  000054                     _vfpfcnvrt$413:
   637                           	opt callstack 0
   638                           
   639                           ; 2 bytes @ 0x53
   640  000054                     	ds	2
   641  000056                     ?_vfprintf:
   642                           	opt callstack 0
   643  000056                     vfprintf@fp:
   644                           	opt callstack 0
   645                           
   646                           ; 2 bytes @ 0x55
   647  000056                     	ds	2
   648  000058                     vfprintf@fmt:
   649                           	opt callstack 0
   650                           
   651                           ; 2 bytes @ 0x57
   652  000058                     	ds	2
   653  00005A                     vfprintf@ap:
   654                           	opt callstack 0
   655                           
   656                           ; 2 bytes @ 0x59
   657  00005A                     	ds	2
   658  00005C                     vfprintf@cfmt:
   659                           	opt callstack 0
   660                           
   661                           ; 2 bytes @ 0x5B
   662  00005C                     	ds	2
   663  00005E                     ?_sprintf:
   664                           	opt callstack 0
   665  00005E                     sprintf@s:
   666                           	opt callstack 0
   667                           
   668                           ; 2 bytes @ 0x5D
   669  00005E                     	ds	2
   670  000060                     sprintf@fmt:
   671                           	opt callstack 0
   672                           
   673                           ; 2 bytes @ 0x5F
   674  000060                     	ds	6
   675  000066                     
   676                           ; 1 bytes @ 0x65
   677  000066                     	ds	2
   678  000068                     sprintf@ap:
   679                           	opt callstack 0
   680                           
   681                           ; 2 bytes @ 0x67
   682  000068                     	ds	2
   683  00006A                     sprintf@f:
   684                           	opt callstack 0
   685                           
   686                           ; 6 bytes @ 0x69
   687  00006A                     	ds	6
   688  000070                     count@a:
   689                           	opt callstack 0
   690                           
   691                           ; 2 bytes @ 0x6F
   692  000070                     	ds	2
   693  000072                     count@b:
   694                           	opt callstack 0
   695                           
   696                           ; 2 bytes @ 0x71
   697  000072                     	ds	2
   698  000074                     
   699                           ; 1 bytes @ 0x73
   700 ;;
   701 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   702 ;;
   703 ;; *************** function _main *****************
   704 ;; Defined at:
   705 ;;		line 270 in file "main.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;                  1    wreg      void 
   712 ;; Registers used:
   713 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   723 ;;Total ram usage:        0 bytes
   724 ;; Hardware stack levels required when called:   11
   725 ;; This function calls:
   726 ;;		_lcd_cmd
   727 ;;		_lcd_init
   728 ;;		_moc
   729 ;; This function is called by:
   730 ;;		Startup code after reset
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           	psect	text0
   735  001EA4                     __ptext0:
   736                           	opt callstack 0
   737  001EA4                     _main:
   738                           	opt callstack 20
   739                           
   740                           ;main.c: 273:     ADCON0=0x01;
   741                           
   742                           ;incstack = 0
   743  001EA4  0E01               	movlw	1
   744  001EA6  6EC2               	movwf	4034,c	;volatile
   745                           
   746                           ;main.c: 274:     ADCON1=0x0B;
   747  001EA8  0E0B               	movlw	11
   748  001EAA  6EC1               	movwf	4033,c	;volatile
   749                           
   750                           ;main.c: 275:     ADCON2=0x01;
   751  001EAC  0E01               	movlw	1
   752  001EAE  6EC0               	movwf	4032,c	;volatile
   753                           
   754                           ;main.c: 277:     TRISA=0xC3;
   755  001EB0  0EC3               	movlw	195
   756  001EB2  6E92               	movwf	3986,c	;volatile
   757                           
   758                           ;main.c: 278:     TRISB=0x3F;
   759  001EB4  0E3F               	movlw	63
   760  001EB6  6E93               	movwf	3987,c	;volatile
   761                           
   762                           ;main.c: 279:     TRISC=0x01;
   763  001EB8  0E01               	movlw	1
   764  001EBA  6E94               	movwf	3988,c	;volatile
   765                           
   766                           ;main.c: 280:     TRISD=0x00;
   767  001EBC  0E00               	movlw	0
   768  001EBE  6E95               	movwf	3989,c	;volatile
   769                           
   770                           ;main.c: 281:     TRISE=0x00;
   771  001EC0  0E00               	movlw	0
   772  001EC2  6E96               	movwf	3990,c	;volatile
   773                           
   774                           ;main.c: 283:     lcd_init();
   775  001EC4  ECB5  F00E         	call	_lcd_init	;wreg free
   776                           
   777                           ;main.c: 284:     lcd_cmd(0x01);
   778  001EC8  0E01               	movlw	1
   779  001ECA  EC16  F010         	call	_lcd_cmd
   780                           
   781                           ;main.c: 286:     while(PORTBbits.RB1 != 0)
   782  001ECE  D002               	goto	l2194
   783  001ED0                     l2192:
   784                           
   785                           ;main.c: 287:     {;main.c: 288:         moc();
   786  001ED0  ECC4  F00C         	call	_moc	;wreg free
   787  001ED4                     l2194:
   788                           
   789                           ;main.c: 286:     while(PORTBbits.RB1 != 0)
   790  001ED4  A281               	btfss	3969,1,c	;volatile
   791  001ED6  EF00  F000         	goto	start
   792  001EDA  D7FA               	goto	l2192
   793  001EDC                     __end_of_main:
   794                           	opt callstack 0
   795                           
   796 ;; *************** function _moc *****************
   797 ;; Defined at:
   798 ;;		line 229 in file "main.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;		None
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   816 ;;Total ram usage:        0 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; Hardware stack levels required when called:   10
   819 ;; This function calls:
   820 ;;		_delay
   821 ;;		_lcd_cmd
   822 ;;		_lcd_str
   823 ;;		_time
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text1
   830  001988                     __ptext1:
   831                           	opt callstack 0
   832  001988                     _moc:
   833                           	opt callstack 20
   834                           
   835                           ;main.c: 232:            {;main.c: 233:                 lcd_cmd(0x01);
   836                           
   837                           ;incstack = 0
   838                           ;main.c: 231:             while(1)
   839  001988  0E01               	movlw	1
   840  00198A  EC16  F010         	call	_lcd_cmd
   841                           
   842                           ;main.c: 234:                 lcd_cmd(0x80);
   843  00198E  0E80               	movlw	128
   844  001990  EC16  F010         	call	_lcd_cmd
   845                           
   846                           ;main.c: 235:                 lcd_str("Wybierz moc:       ");
   847  001994  0E5D               	movlw	low STR_7
   848  001996  6E03               	movwf	lcd_str@str,c
   849  001998  0E10               	movlw	high STR_7
   850  00199A  6E04               	movwf	lcd_str@str+1,c
   851  00199C  EC7D  F00E         	call	_lcd_str	;wreg free
   852                           
   853                           ;main.c: 236:                 lcd_cmd(0xC0);
   854  0019A0  0EC0               	movlw	192
   855  0019A2  EC16  F010         	call	_lcd_cmd
   856                           
   857                           ;main.c: 237:                 lcd_str("    800 W       ");
   858  0019A6  0E93               	movlw	low STR_8
   859  0019A8  6E03               	movwf	lcd_str@str,c
   860  0019AA  0E10               	movlw	high STR_8
   861  0019AC  6E04               	movwf	lcd_str@str+1,c
   862  0019AE  EC7D  F00E         	call	_lcd_str	;wreg free
   863                           
   864                           ;main.c: 238:                 delay(200);
   865  0019B2  0E00               	movlw	0
   866  0019B4  6E02               	movwf	delay@ms+1,c
   867  0019B6  0EC8               	movlw	200
   868  0019B8  6E01               	movwf	delay@ms,c
   869  0019BA  ECA3  F00F         	call	_delay	;wreg free
   870                           
   871                           ;main.c: 239:                 if(PORTBbits.RB5 == 0) break;
   872  0019BE  AA81               	btfss	3969,5,c	;volatile
   873  0019C0  D005               	goto	l2150
   874                           
   875                           ;main.c: 240:                 if(PORTBbits.RB2 == 0) time();
   876  0019C2  B481               	btfsc	3969,2,c	;volatile
   877  0019C4  D7E1               	goto	_moc
   878  0019C6  EC86  F00D         	call	_time	;wreg free
   879  0019CA  D7DE               	goto	_moc
   880  0019CC                     l2150:
   881                           
   882                           ;main.c: 244:             {;main.c: 245:                 lcd_cmd(0xC0);
   883  0019CC  0EC0               	movlw	192
   884  0019CE  EC16  F010         	call	_lcd_cmd
   885                           
   886                           ;main.c: 246:                 lcd_str("    600 W       ");
   887  0019D2  0E82               	movlw	low STR_9
   888  0019D4  6E03               	movwf	lcd_str@str,c
   889  0019D6  0E10               	movlw	high STR_9
   890  0019D8  6E04               	movwf	lcd_str@str+1,c
   891  0019DA  EC7D  F00E         	call	_lcd_str	;wreg free
   892                           
   893                           ;main.c: 247:                 delay(200);
   894  0019DE  0E00               	movlw	0
   895  0019E0  6E02               	movwf	delay@ms+1,c
   896  0019E2  0EC8               	movlw	200
   897  0019E4  6E01               	movwf	delay@ms,c
   898  0019E6  ECA3  F00F         	call	_delay	;wreg free
   899                           
   900                           ;main.c: 248:                 if(PORTBbits.RB5 == 0) break;
   901  0019EA  AA81               	btfss	3969,5,c	;volatile
   902  0019EC  D005               	goto	l2162
   903                           
   904                           ;main.c: 249:                 if(PORTBbits.RB2 == 0) time();
   905  0019EE  B481               	btfsc	3969,2,c	;volatile
   906  0019F0  D7ED               	goto	l2150
   907  0019F2  EC86  F00D         	call	_time	;wreg free
   908  0019F6  D7EA               	goto	l2150
   909  0019F8                     l2162:
   910                           
   911                           ;main.c: 253:             {;main.c: 254:                 lcd_cmd(0xC0);
   912  0019F8  0EC0               	movlw	192
   913  0019FA  EC16  F010         	call	_lcd_cmd
   914                           
   915                           ;main.c: 255:                 lcd_str("    350 W       ");
   916  0019FE  0EA4               	movlw	low STR_10
   917  001A00  6E03               	movwf	lcd_str@str,c
   918  001A02  0E10               	movlw	high STR_10
   919  001A04  6E04               	movwf	lcd_str@str+1,c
   920  001A06  EC7D  F00E         	call	_lcd_str	;wreg free
   921                           
   922                           ;main.c: 256:                 delay(200);
   923  001A0A  0E00               	movlw	0
   924  001A0C  6E02               	movwf	delay@ms+1,c
   925  001A0E  0EC8               	movlw	200
   926  001A10  6E01               	movwf	delay@ms,c
   927  001A12  ECA3  F00F         	call	_delay	;wreg free
   928                           
   929                           ;main.c: 257:                 if(PORTBbits.RB5 == 0) break;
   930  001A16  AA81               	btfss	3969,5,c	;volatile
   931  001A18  D005               	goto	l2174
   932                           
   933                           ;main.c: 258:                 if(PORTBbits.RB2 == 0) time();
   934  001A1A  B481               	btfsc	3969,2,c	;volatile
   935  001A1C  D7ED               	goto	l2162
   936  001A1E  EC86  F00D         	call	_time	;wreg free
   937  001A22  D7EA               	goto	l2162
   938  001A24                     l2174:
   939                           
   940                           ;main.c: 261:            {;main.c: 262:                 lcd_cmd(0xC0);
   941  001A24  0EC0               	movlw	192
   942  001A26  EC16  F010         	call	_lcd_cmd
   943                           
   944                           ;main.c: 263:                 lcd_str("    200 W       ");
   945  001A2A  0E71               	movlw	low STR_11
   946  001A2C  6E03               	movwf	lcd_str@str,c
   947  001A2E  0E10               	movlw	high STR_11
   948  001A30  6E04               	movwf	lcd_str@str+1,c
   949  001A32  EC7D  F00E         	call	_lcd_str	;wreg free
   950                           
   951                           ;main.c: 264:                 delay(200);
   952  001A36  0E00               	movlw	0
   953  001A38  6E02               	movwf	delay@ms+1,c
   954  001A3A  0EC8               	movlw	200
   955  001A3C  6E01               	movwf	delay@ms,c
   956  001A3E  ECA3  F00F         	call	_delay	;wreg free
   957                           
   958                           ;main.c: 265:                 if(PORTBbits.RB5 == 0) break;
   959  001A42  AA81               	btfss	3969,5,c	;volatile
   960  001A44  0012               	return	
   961                           
   962                           ;main.c: 266:                 if(PORTBbits.RB2 == 0) time();
   963  001A46  B481               	btfsc	3969,2,c	;volatile
   964  001A48  D7ED               	goto	l2174
   965  001A4A  EC86  F00D         	call	_time	;wreg free
   966  001A4E  D7EA               	goto	l2174
   967  001A50                     __end_of_moc:
   968                           	opt callstack 0
   969                           
   970 ;; *************** function _time *****************
   971 ;; Defined at:
   972 ;;		line 196 in file "main.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;		None
   975 ;; Auto vars:     Size  Location     Type
   976 ;;  buffer         32   32[BANK0 ] unsigned char [32]
   977 ;;  b               2   66[BANK0 ] int 
   978 ;;  a               2   64[BANK0 ] int 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Totals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;Total ram usage:       36 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    9
   995 ;; This function calls:
   996 ;;		_count
   997 ;;		_delay
   998 ;;		_lcd_cmd
   999 ;;		_lcd_str
  1000 ;;		_sprintf
  1001 ;; This function is called by:
  1002 ;;		_moc
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006                           	psect	text2
  1007  001B0C                     __ptext2:
  1008                           	opt callstack 0
  1009  001B0C                     _time:
  1010                           	opt callstack 20
  1011                           
  1012                           ;main.c: 198:     int a=0, b=0;
  1013                           
  1014                           ;incstack = 0
  1015  001B0C  0E00               	movlw	0
  1016  001B0E  0100               	movlb	0	; () banked
  1017  001B10  6FC1               	movwf	(time@a+1)& (0+255),b
  1018  001B12  0E00               	movlw	0
  1019  001B14  6FC0               	movwf	time@a& (0+255),b
  1020  001B16  0E00               	movlw	0
  1021  001B18  6FC3               	movwf	(time@b+1)& (0+255),b
  1022  001B1A  0E00               	movlw	0
  1023  001B1C  6FC2               	movwf	time@b& (0+255),b
  1024  001B1E                     l2082:
  1025                           
  1026                           ;main.c: 200:            {;main.c: 202:                 char buffer[32];;main.c: 203:   
      +                                        if(b > 50){b = 0;}
  1027  001B1E  0100               	movlb	0	; () banked
  1028  001B20  BFC3               	btfsc	(time@b+1)& (0+255),7,b
  1029  001B22  D00A               	goto	l2086
  1030  001B24  51C3               	movf	(time@b+1)& (0+255),w,b
  1031  001B26  E104               	bnz	u1550
  1032  001B28  0E33               	movlw	51
  1033  001B2A  5DC2               	subwf	time@b& (0+255),w,b
  1034  001B2C  A0D8               	btfss	status,0,c
  1035  001B2E  D004               	goto	l2086
  1036  001B30                     u1550:
  1037                           
  1038                           ; BSR set to: 0
  1039  001B30  0E00               	movlw	0
  1040  001B32  6FC3               	movwf	(time@b+1)& (0+255),b
  1041  001B34  0E00               	movlw	0
  1042  001B36  6FC2               	movwf	time@b& (0+255),b
  1043  001B38                     l2086:
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;main.c: 204:                 sprintf(buffer, "    %02i:%02i            ", a, b);
  1047  001B38  0EA0               	movlw	low time@buffer
  1048  001B3A  6E5E               	movwf	sprintf@s,c
  1049  001B3C  0E00               	movlw	high time@buffer
  1050  001B3E  6E5F               	movwf	sprintf@s+1,c
  1051  001B40  0E01               	movlw	low STR_1
  1052  001B42  6E60               	movwf	sprintf@fmt,c
  1053  001B44  0E10               	movlw	high STR_1
  1054  001B46  6E61               	movwf	sprintf@fmt+1,c
  1055  001B48  C0C0  F062         	movff	time@a,?_sprintf+4
  1056  001B4C  C0C1  F063         	movff	time@a+1,?_sprintf+5
  1057  001B50  C0C2  F064         	movff	time@b,?_sprintf+6
  1058  001B54  C0C3  F065         	movff	time@b+1,?_sprintf+7
  1059  001B58  EC0C  F00F         	call	_sprintf	;wreg free
  1060                           
  1061                           ;main.c: 206:                 lcd_cmd(0x01);
  1062  001B5C  0E01               	movlw	1
  1063  001B5E  EC16  F010         	call	_lcd_cmd
  1064                           
  1065                           ;main.c: 207:                 lcd_cmd(0x80);
  1066  001B62  0E80               	movlw	128
  1067  001B64  EC16  F010         	call	_lcd_cmd
  1068                           
  1069                           ;main.c: 208:                 lcd_str("Czas grzania:       ");
  1070  001B68  0E48               	movlw	low STR_6
  1071  001B6A  6E03               	movwf	lcd_str@str,c
  1072  001B6C  0E10               	movlw	high STR_6
  1073  001B6E  6E04               	movwf	lcd_str@str+1,c
  1074  001B70  EC7D  F00E         	call	_lcd_str	;wreg free
  1075                           
  1076                           ;main.c: 209:                 lcd_cmd(0xC0);
  1077  001B74  0EC0               	movlw	192
  1078  001B76  EC16  F010         	call	_lcd_cmd
  1079                           
  1080                           ;main.c: 210:                 lcd_str(buffer);
  1081  001B7A  0EA0               	movlw	low time@buffer
  1082  001B7C  6E03               	movwf	lcd_str@str,c
  1083  001B7E  0E00               	movlw	high time@buffer
  1084  001B80  6E04               	movwf	lcd_str@str+1,c
  1085  001B82  EC7D  F00E         	call	_lcd_str	;wreg free
  1086                           
  1087                           ;main.c: 211:                 delay(200);
  1088  001B86  0E00               	movlw	0
  1089  001B88  6E02               	movwf	delay@ms+1,c
  1090  001B8A  0EC8               	movlw	200
  1091  001B8C  6E01               	movwf	delay@ms,c
  1092  001B8E  ECA3  F00F         	call	_delay	;wreg free
  1093                           
  1094                           ;main.c: 213:                 if(PORTBbits.RB4 == 0)
  1095  001B92  B881               	btfsc	3969,4,c	;volatile
  1096  001B94  D003               	goto	l2104
  1097                           
  1098                           ;main.c: 214:                 {;main.c: 215:                     a += 1;
  1099  001B96  0100               	movlb	0	; () banked
  1100  001B98  4BC0               	infsnz	time@a& (0+255),f,b
  1101  001B9A  2BC1               	incf	(time@a+1)& (0+255),f,b
  1102  001B9C                     l2104:
  1103                           
  1104                           ;main.c: 218:                 if(PORTBbits.RB3 == 0)
  1105  001B9C  B681               	btfsc	3969,3,c	;volatile
  1106  001B9E  D005               	goto	l2108
  1107                           
  1108                           ;main.c: 219:                 {;main.c: 220:                     b += 10;
  1109  001BA0  0E0A               	movlw	10
  1110  001BA2  0100               	movlb	0	; () banked
  1111  001BA4  27C2               	addwf	time@b& (0+255),f,b
  1112  001BA6  0E00               	movlw	0
  1113  001BA8  23C3               	addwfc	(time@b+1)& (0+255),f,b
  1114  001BAA                     l2108:
  1115                           
  1116                           ;main.c: 223:                 if(PORTBbits.RB2 == 0){count(a, b);}
  1117  001BAA  B481               	btfsc	3969,2,c	;volatile
  1118  001BAC  D7B8               	goto	l2082
  1119  001BAE  C0C0  F070         	movff	time@a,count@a
  1120  001BB2  C0C1  F071         	movff	time@a+1,count@a+1
  1121  001BB6  C0C2  F072         	movff	time@b,count@b
  1122  001BBA  C0C3  F073         	movff	time@b+1,count@b+1
  1123  001BBE  EC28  F00D         	call	_count	;wreg free
  1124  001BC2  D7AD               	goto	l2082
  1125  001BC4                     __end_of_time:
  1126                           	opt callstack 0
  1127                           
  1128 ;; *************** function _count *****************
  1129 ;; Defined at:
  1130 ;;		line 167 in file "main.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;  a               2  111[COMRAM] int 
  1133 ;;  b               2  113[COMRAM] int 
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;  buffer         32    0[BANK0 ] unsigned char [32]
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      void 
  1138 ;; Registers used:
  1139 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1145 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1148 ;;      Totals:         4      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1149 ;;Total ram usage:       36 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; Hardware stack levels required when called:    8
  1152 ;; This function calls:
  1153 ;;		_delay
  1154 ;;		_lcd_cmd
  1155 ;;		_lcd_str
  1156 ;;		_sprintf
  1157 ;; This function is called by:
  1158 ;;		_time
  1159 ;; This function uses a non-reentrant model
  1160 ;;
  1161                           
  1162                           	psect	text3
  1163  001A50                     __ptext3:
  1164                           	opt callstack 0
  1165  001A50                     _count:
  1166                           	opt callstack 20
  1167                           
  1168                           ;main.c: 170:     {;main.c: 171:         while((a != 0) & (b != 0))
  1169                           
  1170                           ;incstack = 0
  1171                           ;main.c: 167: void count(int a, int b);main.c: 168: {;main.c: 169:     while(1)
  1172  001A50  D039               	goto	l2068
  1173  001A52                     l2046:
  1174                           
  1175                           ;main.c: 172:         {;main.c: 173:             char buffer[32];;main.c: 174:          
      +                             sprintf(buffer, "    %02i:%02i            ", a, b);
  1176  001A52  0E80               	movlw	low count@buffer
  1177  001A54  6E5E               	movwf	sprintf@s,c
  1178  001A56  0E00               	movlw	high count@buffer
  1179  001A58  6E5F               	movwf	sprintf@s+1,c
  1180  001A5A  0E01               	movlw	low STR_1
  1181  001A5C  6E60               	movwf	sprintf@fmt,c
  1182  001A5E  0E10               	movlw	high STR_1
  1183  001A60  6E61               	movwf	sprintf@fmt+1,c
  1184  001A62  C070  F062         	movff	count@a,?_sprintf+4
  1185  001A66  C071  F063         	movff	count@a+1,?_sprintf+5
  1186  001A6A  C072  F064         	movff	count@b,?_sprintf+6
  1187  001A6E  C073  F065         	movff	count@b+1,?_sprintf+7
  1188  001A72  EC0C  F00F         	call	_sprintf	;wreg free
  1189                           
  1190                           ;main.c: 177:                     lcd_cmd(0x01);
  1191  001A76  0E01               	movlw	1
  1192  001A78  EC16  F010         	call	_lcd_cmd
  1193                           
  1194                           ;main.c: 178:                     lcd_cmd(0x80);
  1195  001A7C  0E80               	movlw	128
  1196  001A7E  EC16  F010         	call	_lcd_cmd
  1197                           
  1198                           ;main.c: 179:                     lcd_str("Grzanie:       ");
  1199  001A82  0EB5               	movlw	low STR_2
  1200  001A84  6E03               	movwf	lcd_str@str,c
  1201  001A86  0E10               	movlw	high STR_2
  1202  001A88  6E04               	movwf	lcd_str@str+1,c
  1203  001A8A  EC7D  F00E         	call	_lcd_str	;wreg free
  1204                           
  1205                           ;main.c: 180:                     lcd_cmd(0xC0);
  1206  001A8E  0EC0               	movlw	192
  1207  001A90  EC16  F010         	call	_lcd_cmd
  1208                           
  1209                           ;main.c: 181:                     lcd_str(buffer);
  1210  001A94  0E80               	movlw	low count@buffer
  1211  001A96  6E03               	movwf	lcd_str@str,c
  1212  001A98  0E00               	movlw	high count@buffer
  1213  001A9A  6E04               	movwf	lcd_str@str+1,c
  1214  001A9C  EC7D  F00E         	call	_lcd_str	;wreg free
  1215                           
  1216                           ;main.c: 182:                     delay(1000);
  1217  001AA0  0E03               	movlw	3
  1218  001AA2  6E02               	movwf	delay@ms+1,c
  1219  001AA4  0EE8               	movlw	232
  1220  001AA6  6E01               	movwf	delay@ms,c
  1221  001AA8  ECA3  F00F         	call	_delay	;wreg free
  1222                           
  1223                           ;main.c: 183:                     b--;
  1224  001AAC  0672               	decf	count@b,f,c
  1225  001AAE  A0D8               	btfss	status,0,c
  1226  001AB0  0673               	decf	count@b+1,f,c
  1227                           
  1228                           ;main.c: 184:                     if(b < 0){a--; b = 59;}
  1229  001AB2  AE73               	btfss	count@b+1,7,c
  1230  001AB4  D007               	goto	l2068
  1231  001AB6  0670               	decf	count@a,f,c
  1232  001AB8  A0D8               	btfss	status,0,c
  1233  001ABA  0671               	decf	count@a+1,f,c
  1234  001ABC  0E00               	movlw	0
  1235  001ABE  6E73               	movwf	count@b+1,c
  1236  001AC0  0E3B               	movlw	59
  1237  001AC2  6E72               	movwf	count@b,c
  1238  001AC4                     l2068:
  1239                           
  1240                           ;main.c: 171:         while((a != 0) & (b != 0))
  1241  001AC4  5070               	movf	count@a,w,c
  1242  001AC6  1071               	iorwf	count@a+1,w,c
  1243  001AC8  B4D8               	btfsc	status,2,c
  1244  001ACA  D004               	goto	u1540
  1245  001ACC  5072               	movf	count@b,w,c
  1246  001ACE  1073               	iorwf	count@b+1,w,c
  1247  001AD0  A4D8               	btfss	status,2,c
  1248  001AD2  D7BF               	goto	l2046
  1249  001AD4                     u1540:
  1250                           
  1251                           ;main.c: 187:                 lcd_cmd(0x01);
  1252  001AD4  0E01               	movlw	1
  1253  001AD6  EC16  F010         	call	_lcd_cmd
  1254                           
  1255                           ;main.c: 188:                 lcd_cmd(0x80);
  1256  001ADA  0E80               	movlw	128
  1257  001ADC  EC16  F010         	call	_lcd_cmd
  1258                           
  1259                           ;main.c: 189:                 lcd_str("Koniec zabawy        ");
  1260  001AE0  0E32               	movlw	low STR_3
  1261  001AE2  6E03               	movwf	lcd_str@str,c
  1262  001AE4  0E10               	movlw	high STR_3
  1263  001AE6  6E04               	movwf	lcd_str@str+1,c
  1264  001AE8  EC7D  F00E         	call	_lcd_str	;wreg free
  1265                           
  1266                           ;main.c: 190:                 lcd_cmd(0xC0);
  1267  001AEC  0EC0               	movlw	192
  1268  001AEE  EC16  F010         	call	_lcd_cmd
  1269                           
  1270                           ;main.c: 191:                 lcd_str("Wyjmnij rzarcie       ");
  1271  001AF2  0E1B               	movlw	low STR_4
  1272  001AF4  6E03               	movwf	lcd_str@str,c
  1273  001AF6  0E10               	movlw	high STR_4
  1274  001AF8  6E04               	movwf	lcd_str@str+1,c
  1275  001AFA  EC7D  F00E         	call	_lcd_str	;wreg free
  1276                           
  1277                           ;main.c: 192:                 delay(1000);
  1278  001AFE  0E03               	movlw	3
  1279  001B00  6E02               	movwf	delay@ms+1,c
  1280  001B02  0EE8               	movlw	232
  1281  001B04  6E01               	movwf	delay@ms,c
  1282  001B06  ECA3  F00F         	call	_delay	;wreg free
  1283  001B0A  D7DC               	goto	l2068
  1284  001B0C                     __end_of_count:
  1285                           	opt callstack 0
  1286                           
  1287 ;; *************** function _sprintf *****************
  1288 ;; Defined at:
  1289 ;;		line 9 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/nf_sprintf.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;  s               2   93[COMRAM] PTR unsigned char 
  1292 ;;		 -> time@buffer(32), count@buffer(32), 
  1293 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
  1294 ;;		 -> STR_5(26), STR_1(26), 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  f               6  105[COMRAM] struct _IO_FILE
  1297 ;;  ap              2  103[COMRAM] PTR void [1]
  1298 ;;		 -> ?_sprintf(2), 
  1299 ;;  ret             2    0        int 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  2   93[COMRAM] int 
  1302 ;; Registers used:
  1303 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1309 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1310 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1312 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1313 ;;Total ram usage:       18 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:    7
  1316 ;; This function calls:
  1317 ;;		_vfprintf
  1318 ;; This function is called by:
  1319 ;;		_count
  1320 ;;		_time
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	text4
  1325  001E18                     __ptext4:
  1326                           	opt callstack 0
  1327  001E18                     _sprintf:
  1328                           	opt callstack 21
  1329                           
  1330                           ;incstack = 0
  1331  001E18  0E62               	movlw	low (?_sprintf+4)
  1332  001E1A  6E68               	movwf	sprintf@ap,c
  1333  001E1C  0E00               	movlw	high (?_sprintf+4)
  1334  001E1E  6E69               	movwf	sprintf@ap+1,c
  1335  001E20  C05E  F06A         	movff	sprintf@s,sprintf@f
  1336  001E24  C05F  F06B         	movff	sprintf@s+1,sprintf@f+1
  1337  001E28  0E00               	movlw	0
  1338  001E2A  6E6D               	movwf	sprintf@f+3,c
  1339  001E2C  0E00               	movlw	0
  1340  001E2E  6E6C               	movwf	sprintf@f+2,c
  1341  001E30  0E00               	movlw	0
  1342  001E32  6E6F               	movwf	sprintf@f+5,c
  1343  001E34  0E00               	movlw	0
  1344  001E36  6E6E               	movwf	sprintf@f+4,c
  1345  001E38  0E6A               	movlw	low sprintf@f
  1346  001E3A  6E56               	movwf	vfprintf@fp,c
  1347  001E3C  0E00               	movlw	high sprintf@f
  1348  001E3E  6E57               	movwf	vfprintf@fp+1,c
  1349  001E40  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
  1350  001E44  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1351  001E48  0E68               	movlw	low sprintf@ap
  1352  001E4A  6E5A               	movwf	vfprintf@ap,c
  1353  001E4C  0E00               	movlw	high sprintf@ap
  1354  001E4E  6E5B               	movwf	vfprintf@ap+1,c
  1355  001E50  ECE3  F00E         	call	_vfprintf	;wreg free
  1356  001E54  506C               	movf	sprintf@f+2,w,c
  1357  001E56  245E               	addwf	sprintf@s,w,c
  1358  001E58  6ED9               	movwf	fsr2l,c
  1359  001E5A  506D               	movf	sprintf@f+3,w,c
  1360  001E5C  205F               	addwfc	sprintf@s+1,w,c
  1361  001E5E  6EDA               	movwf	fsr2h,c
  1362  001E60  0E00               	movlw	0
  1363  001E62  6EDF               	movwf	indf2,c
  1364  001E64  0012               	return		;funcret
  1365  001E66                     __end_of_sprintf:
  1366                           	opt callstack 0
  1367                           
  1368 ;; *************** function _vfprintf *****************
  1369 ;; Defined at:
  1370 ;;		line 1368 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
  1373 ;;		 -> sprintf@f(6), 
  1374 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
  1375 ;;		 -> STR_5(26), STR_1(26), 
  1376 ;;  ap              2   89[COMRAM] PTR PTR void 
  1377 ;;		 -> sprintf@ap(2), 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
  1380 ;;		 -> STR_5(26), STR_1(26), 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  2   85[COMRAM] int 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1390 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;Total ram usage:        8 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    6
  1397 ;; This function calls:
  1398 ;;		_vfpfcnvrt
  1399 ;; This function is called by:
  1400 ;;		_sprintf
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text5
  1405  001DC6                     __ptext5:
  1406                           	opt callstack 0
  1407  001DC6                     _vfprintf:
  1408                           	opt callstack 21
  1409                           
  1410                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1
      +                          369: {;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1371:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1373:     cfmt = (char *)fmt;
  1411                           
  1412                           ;incstack = 0
  1413  001DC6  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
  1414  001DCA  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1415                           
  1416                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  1417  001DCE  0E00               	movlw	0
  1418  001DD0  6E75               	movwf	_nout+1,c
  1419  001DD2  0E00               	movlw	0
  1420  001DD4  6E74               	movwf	_nout,c
  1421                           
  1422                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
  1423  001DD6  D012               	goto	l1998
  1424  001DD8                     l1996:
  1425                           
  1426                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout += vfpfcnv
      +                          rt(fp, &cfmt, ap);
  1427  001DD8  C056  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  1428  001DDC  C057  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1429  001DE0  0E5C               	movlw	low vfprintf@cfmt
  1430  001DE2  6E42               	movwf	vfpfcnvrt@fmt,c
  1431  001DE4  0E00               	movlw	high vfprintf@cfmt
  1432  001DE6  6E43               	movwf	vfpfcnvrt@fmt+1,c
  1433  001DE8  C05A  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  1434  001DEC  C05B  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1435  001DF0  EC63  F008         	call	_vfpfcnvrt	;wreg free
  1436  001DF4  5040               	movf	?_vfpfcnvrt,w,c
  1437  001DF6  2674               	addwf	_nout,f,c
  1438  001DF8  5041               	movf	?_vfpfcnvrt+1,w,c
  1439  001DFA  2275               	addwfc	_nout+1,f,c
  1440  001DFC                     l1998:
  1441                           
  1442                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
  1443  001DFC  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
  1444  001E00  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1445  001E04                     	if	0	;tblptru may be non-zero
  1446  001E04                     	endif
  1447  001E04                     	if	0	;tblptru may be non-zero
  1448  001E04                     	endif
  1449  001E04  0008               	tblrd		*
  1450  001E06  50F5               	movf	tablat,w,c
  1451  001E08  0900               	iorlw	0
  1452  001E0A  A4D8               	btfss	status,2,c
  1453  001E0C  D7E5               	goto	l1996
  1454                           
  1455                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nout;
  1456  001E0E  C074  F056         	movff	_nout,?_vfprintf
  1457  001E12  C075  F057         	movff	_nout+1,?_vfprintf+1
  1458  001E16  0012               	return		;funcret
  1459  001E18                     __end_of_vfprintf:
  1460                           	opt callstack 0
  1461                           
  1462 ;; *************** function _vfpfcnvrt *****************
  1463 ;; Defined at:
  1464 ;;		line 670 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  1467 ;;		 -> sprintf@f(6), 
  1468 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  1469 ;;		 -> vfprintf@cfmt(2), 
  1470 ;;  ap              2   67[COMRAM] PTR PTR void 
  1471 ;;		 -> sprintf@ap(2), 
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;  ll              8   73[COMRAM] long long 
  1474 ;;  llu             8    0        unsigned long long 
  1475 ;;  f               4    0        unsigned long long 
  1476 ;;  vp              3    0        PTR void 
  1477 ;;  ct              3    0        unsigned char [3]
  1478 ;;  cp              3    0        PTR unsigned char 
  1479 ;;  done            2   81[COMRAM] int 
  1480 ;;  i               2    0        int 
  1481 ;;  c               1    0        unsigned char 
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  2   63[COMRAM] int 
  1484 ;; Registers used:
  1485 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1491 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1495 ;;Total ram usage:       22 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    5
  1498 ;; This function calls:
  1499 ;;		_atoi
  1500 ;;		_dtoa
  1501 ;;		_fputc
  1502 ;;		_isdigit
  1503 ;; This function is called by:
  1504 ;;		_vfprintf
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           	psect	text6
  1509  0010C6                     __ptext6:
  1510                           	opt callstack 0
  1511  0010C6                     _vfpfcnvrt:
  1512                           	opt callstack 21
  1513                           
  1514                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpfcnvrt(FIL
      +                          E *fp, char *fmt[], va_list ap);/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c
      +                          : 671: {;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 672:     char c, *cp,
      +                           ct[3];;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 673:     int done, i;;
      +                          /opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 674:     long long ll;;/opt/mi
      +                          crochip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 675:     unsigned long long llu;
  1515                           
  1516                           ;incstack = 0
  1517  0010C6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1518  0010CA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1519  0010CE  CFDE FFF6          	movff	postinc2,tblptrl
  1520  0010D2  CFDD FFF7          	movff	postdec2,tblptrh
  1521  0010D6                     	if	0	;tblptru may be non-zero
  1522  0010D6                     	endif
  1523  0010D6                     	if	0	;tblptru may be non-zero
  1524  0010D6                     	endif
  1525  0010D6  0008               	tblrd		*
  1526  0010D8  50F5               	movf	tablat,w,c
  1527  0010DA  0A25               	xorlw	37
  1528  0010DC  A4D8               	btfss	status,2,c
  1529  0010DE  D143               	goto	l1970
  1530                           
  1531                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  1532  0010E0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1533  0010E4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1534  0010E8  2ADE               	incf	postinc2,f,c
  1535  0010EA  0E00               	movlw	0
  1536  0010EC  22DD               	addwfc	postdec2,f,c
  1537                           
  1538                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags = width = 
      +                          0;
  1539  0010EE  0E00               	movlw	0
  1540  0010F0  6E77               	movwf	_width+1,c
  1541  0010F2  0E00               	movlw	0
  1542  0010F4  6E76               	movwf	_width,c
  1543  0010F6  C076  F07A         	movff	_width,_flags
  1544  0010FA  C077  F07B         	movff	_width+1,_flags+1
  1545                           
  1546                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = -1;
  1547  0010FE  6878               	setf	_prec,c
  1548  001100  6879               	setf	_prec+1,c
  1549                           
  1550                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 688:         done = 0;
  1551  001102  0E00               	movlw	0
  1552  001104  6E53               	movwf	vfpfcnvrt@done+1,c
  1553  001106  0E00               	movlw	0
  1554  001108  D014               	goto	L1
  1555  00110A                     l1896:
  1556                           
  1557                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 692:                     flag
      +                          s |= (1 << 0);
  1558  00110A  807A               	bsf	_flags,0,c
  1559  00110C                     l1898:
  1560                           
  1561                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 693:                     ++*f
      +                          mt;
  1562  00110C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1563  001110  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1564  001114  2ADE               	incf	postinc2,f,c
  1565  001116  0E00               	movlw	0
  1566  001118  22DD               	addwfc	postdec2,f,c
  1567                           
  1568                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 694:                     brea
      +                          k;
  1569  00111A  D02E               	goto	l1922
  1570  00111C                     l1900:
  1571                           
  1572                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 696:                     flag
      +                          s |= (1 << 1);
  1573  00111C  827A               	bsf	_flags,1,c
  1574  00111E  D7F6               	goto	l1898
  1575  001120                     l1904:
  1576                           
  1577                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 700:                     flag
      +                          s |= (1 << 2);
  1578  001120  847A               	bsf	_flags,2,c
  1579  001122  D7F4               	goto	l1898
  1580  001124                     l1908:
  1581                           
  1582                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 704:                     flag
      +                          s |= (1 << 3);
  1583  001124  867A               	bsf	_flags,3,c
  1584  001126  D7F2               	goto	l1898
  1585  001128                     l1912:
  1586                           
  1587                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 708:                     flag
      +                          s |= (1 << 4);
  1588  001128  887A               	bsf	_flags,4,c
  1589  00112A  D7F0               	goto	l1898
  1590  00112C                     l1916:
  1591                           
  1592                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 712:                     done
      +                           = 1;
  1593  00112C  0E00               	movlw	0
  1594  00112E  6E53               	movwf	vfpfcnvrt@done+1,c
  1595  001130  0E01               	movlw	1
  1596  001132                     L1:
  1597  001132  6E52               	movwf	vfpfcnvrt@done,c
  1598                           
  1599                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 713:                     brea
      +                          k;
  1600  001134  D021               	goto	l1922
  1601  001136                     l1920:
  1602  001136  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1603  00113A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1604  00113E  CFDE FFF6          	movff	postinc2,tblptrl
  1605  001142  CFDD FFF7          	movff	postdec2,tblptrh
  1606  001146                     	if	0	;tblptru may be non-zero
  1607  001146                     	endif
  1608  001146                     	if	0	;tblptru may be non-zero
  1609  001146                     	endif
  1610  001146  0008               	tblrd		*
  1611  001148  50F5               	movf	tablat,w,c
  1612  00114A  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1613  00114C  6A47               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  1614                           
  1615                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1616                           ; Switch size 1, requested type "simple"
  1617                           ; Number of cases is 1, Range of values is 0 to 0
  1618                           ; switch strategies available:
  1619                           ; Name         Instructions Cycles
  1620                           ; simple_byte            4     3 (average)
  1621                           ;	Chosen strategy is simple_byte
  1622  00114E  5047               	movf	??_vfpfcnvrt+1,w,c
  1623  001150  0A00               	xorlw	0	; case 0
  1624  001152  A4D8               	btfss	status,2,c
  1625  001154  D7EB               	goto	l1916
  1626                           
  1627                           ; Switch size 1, requested type "simple"
  1628                           ; Number of cases is 5, Range of values is 32 to 48
  1629                           ; switch strategies available:
  1630                           ; Name         Instructions Cycles
  1631                           ; simple_byte           16     9 (average)
  1632                           ;	Chosen strategy is simple_byte
  1633  001156  5046               	movf	??_vfpfcnvrt,w,c
  1634  001158  0A20               	xorlw	32	; case 32
  1635  00115A  B4D8               	btfsc	status,2,c
  1636  00115C  D7E3               	goto	l1908
  1637  00115E  0A03               	xorlw	3	; case 35
  1638  001160  B4D8               	btfsc	status,2,c
  1639  001162  D7E2               	goto	l1912
  1640  001164  0A08               	xorlw	8	; case 43
  1641  001166  B4D8               	btfsc	status,2,c
  1642  001168  D7DB               	goto	l1904
  1643  00116A  0A06               	xorlw	6	; case 45
  1644  00116C  B4D8               	btfsc	status,2,c
  1645  00116E  D7CD               	goto	l1896
  1646  001170  0A1D               	xorlw	29	; case 48
  1647  001172  B4D8               	btfsc	status,2,c
  1648  001174  D7D3               	goto	l1900
  1649  001176  D7DA               	goto	l1916
  1650  001178                     l1922:
  1651                           
  1652                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 689:         while (!done) {
  1653  001178  5052               	movf	vfpfcnvrt@done,w,c
  1654  00117A  1053               	iorwf	vfpfcnvrt@done+1,w,c
  1655  00117C  B4D8               	btfsc	status,2,c
  1656  00117E  D7DB               	goto	l1920
  1657                           
  1658                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 716:         if (flags & (1 <
      +                          < 0)) {
  1659  001180  B07A               	btfsc	_flags,0,c
  1660                           
  1661                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 717:             flags &= ~(1
      +                           << 1);
  1662  001182  927A               	bcf	_flags,1,c
  1663                           
  1664                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 723:         if ((*fmt)[0] ==
      +                           '*') {
  1665  001184  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1666  001188  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1667  00118C  CFDE FFF6          	movff	postinc2,tblptrl
  1668  001190  CFDD FFF7          	movff	postdec2,tblptrh
  1669  001194                     	if	0	;tblptru may be non-zero
  1670  001194                     	endif
  1671  001194                     	if	0	;tblptru may be non-zero
  1672  001194                     	endif
  1673  001194  0008               	tblrd		*
  1674  001196  50F5               	movf	tablat,w,c
  1675  001198  0A2A               	xorlw	42
  1676  00119A  A4D8               	btfss	status,2,c
  1677  00119C  D023               	goto	l1934
  1678                           
  1679                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 724:             ++*fmt;
  1680  00119E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1681  0011A2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1682  0011A6  2ADE               	incf	postinc2,f,c
  1683  0011A8  0E00               	movlw	0
  1684  0011AA  22DD               	addwfc	postdec2,f,c
  1685                           
  1686                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 725:             width = (*(i
      +                          nt *)__va_arg(*(int **)ap, (int)0));
  1687  0011AC  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1688  0011B0  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1689  0011B4  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1690  0011B8  0E02               	movlw	2
  1691  0011BA  26DE               	addwf	postinc2,f,c
  1692  0011BC  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1693  0011C0  0E00               	movlw	0
  1694  0011C2  22DD               	addwfc	postdec2,f,c
  1695  0011C4  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1696  0011C8  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1697  0011CC  CFDE F076          	movff	postinc2,_width
  1698  0011D0  CFDD F077          	movff	postdec2,_width+1
  1699                           
  1700                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 726:             if (width < 
      +                          0) {
  1701  0011D4  AE77               	btfss	_width+1,7,c
  1702  0011D6  D03F               	goto	u1420
  1703                           
  1704                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 727:                 flags |=
      +                           (1 << 0);
  1705  0011D8  807A               	bsf	_flags,0,c
  1706                           
  1707                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 728:                 width = 
      +                          -width;
  1708  0011DA  6C76               	negf	_width,c
  1709  0011DC  1E77               	comf	_width+1,f,c
  1710  0011DE  B0D8               	btfsc	status,0,c
  1711  0011E0  2A77               	incf	_width+1,f,c
  1712  0011E2  D039               	goto	u1420
  1713  0011E4                     l1934:
  1714                           
  1715                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 731:             width = atoi
      +                          (*fmt);
  1716  0011E4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1717  0011E8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1718  0011EC  CFDE F008          	movff	postinc2,atoi@s
  1719  0011F0  CFDD F009          	movff	postdec2,atoi@s+1
  1720  0011F4  EC92  F00B         	call	_atoi	;wreg free
  1721  0011F8  C008  F076         	movff	?_atoi,_width
  1722  0011FC  C009  F077         	movff	?_atoi+1,_width+1
  1723                           
  1724                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 732:             while ((0 ? 
      +                          isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1725  001200  D007               	goto	l1938
  1726  001202                     l1936:
  1727                           
  1728                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 733:                 ++*fmt;
  1729  001202  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1730  001206  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1731  00120A  2ADE               	incf	postinc2,f,c
  1732  00120C  0E00               	movlw	0
  1733  00120E  22DD               	addwfc	postdec2,f,c
  1734  001210                     l1938:
  1735  001210  0ED0               	movlw	208
  1736  001212  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1737  001214  0EFF               	movlw	255
  1738  001216  6E47               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1739  001218  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1740  00121C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1741  001220  CFDE FFF6          	movff	postinc2,tblptrl
  1742  001224  CFDD FFF7          	movff	postdec2,tblptrh
  1743  001228                     	if	0	;tblptru may be non-zero
  1744  001228                     	endif
  1745  001228                     	if	0	;tblptru may be non-zero
  1746  001228                     	endif
  1747  001228  0008               	tblrd		*
  1748  00122A  50F5               	movf	tablat,w,c
  1749  00122C  6E48               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1750  00122E  6A49               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1751  001230  5046               	movf	??_vfpfcnvrt,w,c
  1752  001232  2648               	addwf	??_vfpfcnvrt+2,f,c
  1753  001234  5047               	movf	??_vfpfcnvrt+1,w,c
  1754  001236  2249               	addwfc	??_vfpfcnvrt+3,f,c
  1755  001238  5049               	movf	??_vfpfcnvrt+3,w,c
  1756  00123A  E106               	bnz	u1400
  1757  00123C  0E0A               	movlw	10
  1758  00123E  5C48               	subwf	??_vfpfcnvrt+2,w,c
  1759  001240  B0D8               	btfsc	status,0,c
  1760  001242  D002               	goto	u1400
  1761  001244  0E01               	movlw	1
  1762  001246  D001               	goto	u1410
  1763  001248                     u1400:
  1764  001248  0E00               	movlw	0
  1765  00124A                     u1410:
  1766  00124A  6E54               	movwf	_vfpfcnvrt$413,c
  1767  00124C  6A55               	clrf	_vfpfcnvrt$413+1,c
  1768  00124E  5054               	movf	_vfpfcnvrt$413,w,c
  1769  001250  1055               	iorwf	_vfpfcnvrt$413+1,w,c
  1770  001252  A4D8               	btfss	status,2,c
  1771  001254  D7D6               	goto	l1936
  1772  001256                     u1420:
  1773                           
  1774                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 825:         if ((*fmt[0] == 
      +                          'd') || (*fmt[0] == 'i')) {
  1775  001256  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1776  00125A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1777  00125E  CFDE FFF6          	movff	postinc2,tblptrl
  1778  001262  CFDD FFF7          	movff	postdec2,tblptrh
  1779  001266                     	if	0	;tblptru may be non-zero
  1780  001266                     	endif
  1781  001266                     	if	0	;tblptru may be non-zero
  1782  001266                     	endif
  1783  001266  0008               	tblrd		*
  1784  001268  50F5               	movf	tablat,w,c
  1785  00126A  0A64               	xorlw	100
  1786  00126C  B4D8               	btfsc	status,2,c
  1787  00126E  D00D               	goto	u1440
  1788  001270  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1789  001274  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1790  001278  CFDE FFF6          	movff	postinc2,tblptrl
  1791  00127C  CFDD FFF7          	movff	postdec2,tblptrh
  1792  001280                     	if	0	;tblptru may be non-zero
  1793  001280                     	endif
  1794  001280                     	if	0	;tblptru may be non-zero
  1795  001280                     	endif
  1796  001280  0008               	tblrd		*
  1797  001282  50F5               	movf	tablat,w,c
  1798  001284  0A69               	xorlw	105
  1799  001286  A4D8               	btfss	status,2,c
  1800  001288  D03F               	goto	l1954
  1801  00128A                     u1440:
  1802                           
  1803                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 827:             ++*fmt;
  1804  00128A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1805  00128E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1806  001292  2ADE               	incf	postinc2,f,c
  1807  001294  0E00               	movlw	0
  1808  001296  22DD               	addwfc	postdec2,f,c
  1809                           
  1810                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 828:             ll = (long l
      +                          ong)(*(int *)__va_arg(*(int **)ap, (int)0));
  1811  001298  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1812  00129C  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1813  0012A0  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1814  0012A4  0E02               	movlw	2
  1815  0012A6  26DE               	addwf	postinc2,f,c
  1816  0012A8  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1817  0012AC  0E00               	movlw	0
  1818  0012AE  22DD               	addwfc	postdec2,f,c
  1819  0012B0  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1820  0012B4  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1821  0012B8  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1822  0012BC  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1823  0012C0  0E00               	movlw	0
  1824  0012C2  BE4B               	btfsc	vfpfcnvrt@ll+1,7,c
  1825  0012C4  0EFF               	movlw	-1
  1826  0012C6  6E4C               	movwf	vfpfcnvrt@ll+2,c
  1827  0012C8  6E4D               	movwf	vfpfcnvrt@ll+3,c
  1828  0012CA  6E4E               	movwf	vfpfcnvrt@ll+4,c
  1829  0012CC  6E4F               	movwf	vfpfcnvrt@ll+5,c
  1830  0012CE  6E50               	movwf	vfpfcnvrt@ll+6,c
  1831  0012D0  6E51               	movwf	vfpfcnvrt@ll+7,c
  1832                           
  1833                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 830:             return dtoa(
      +                          fp, ll);
  1834  0012D2  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1835  0012D6  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1836  0012DA  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1837  0012DE  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1838  0012E2  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1839  0012E6  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1840  0012EA  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1841  0012EE  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1842  0012F2  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1843  0012F6  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1844  0012FA  ECCD  F009         	call	_dtoa	;wreg free
  1845  0012FE  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1846  001302  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1847  001306  0012               	return	
  1848  001308                     l1954:
  1849                           
  1850                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*fmt)[0] =
      +                          = '%') {
  1851  001308  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1852  00130C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1853  001310  CFDE FFF6          	movff	postinc2,tblptrl
  1854  001314  CFDD FFF7          	movff	postdec2,tblptrh
  1855  001318                     	if	0	;tblptru may be non-zero
  1856  001318                     	endif
  1857  001318                     	if	0	;tblptru may be non-zero
  1858  001318                     	endif
  1859  001318  0008               	tblrd		*
  1860  00131A  50F5               	movf	tablat,w,c
  1861  00131C  0A25               	xorlw	37
  1862  00131E  A4D8               	btfss	status,2,c
  1863  001320  D016               	goto	l1964
  1864                           
  1865                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++*fmt;
  1866  001322  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1867  001326  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1868  00132A  2ADE               	incf	postinc2,f,c
  1869  00132C  0E00               	movlw	0
  1870  00132E  22DD               	addwfc	postdec2,f,c
  1871                           
  1872                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fputc((int)
      +                          '%', fp);
  1873  001330  0E00               	movlw	0
  1874  001332  6E02               	movwf	fputc@c+1,c
  1875  001334  0E25               	movlw	37
  1876  001336  6E01               	movwf	fputc@c,c
  1877  001338  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1878  00133C  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1879  001340  ECE2  F00D         	call	_fputc	;wreg free
  1880  001344                     l1960:
  1881                           
  1882                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             return 1;
  1883  001344  0E00               	movlw	0
  1884  001346  6E41               	movwf	?_vfpfcnvrt+1,c
  1885  001348  0E01               	movlw	1
  1886  00134A  6E40               	movwf	?_vfpfcnvrt,c
  1887  00134C  0012               	return	
  1888  00134E                     l1964:
  1889                           
  1890                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt;
  1891  00134E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1892  001352  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1893  001356  2ADE               	incf	postinc2,f,c
  1894  001358  0E00               	movlw	0
  1895  00135A  22DD               	addwfc	postdec2,f,c
  1896                           
  1897                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1358:         return 0;
  1898  00135C  0E00               	movlw	0
  1899  00135E  6E41               	movwf	?_vfpfcnvrt+1,c
  1900  001360  0E00               	movlw	0
  1901  001362  6E40               	movwf	?_vfpfcnvrt,c
  1902  001364  0012               	return	
  1903  001366                     l1970:
  1904                           
  1905                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int)(*fmt)[0
      +                          ], fp);
  1906  001366  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1907  00136A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1908  00136E  CFDE FFF6          	movff	postinc2,tblptrl
  1909  001372  CFDD FFF7          	movff	postdec2,tblptrh
  1910  001376                     	if	0	;tblptru may be non-zero
  1911  001376                     	endif
  1912  001376                     	if	0	;tblptru may be non-zero
  1913  001376                     	endif
  1914  001376  0008               	tblrd		*
  1915  001378  50F5               	movf	tablat,w,c
  1916  00137A  6E01               	movwf	fputc@c,c
  1917  00137C  6A02               	clrf	fputc@c+1,c
  1918  00137E  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1919  001382  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1920  001386  ECE2  F00D         	call	_fputc	;wreg free
  1921                           
  1922                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  1923  00138A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1924  00138E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1925  001392  2ADE               	incf	postinc2,f,c
  1926  001394  0E00               	movlw	0
  1927  001396  22DD               	addwfc	postdec2,f,c
  1928  001398  D7D5               	goto	l1960
  1929  00139A                     __end_of_vfpfcnvrt:
  1930                           	opt callstack 0
  1931                           
  1932 ;; *************** function _dtoa *****************
  1933 ;; Defined at:
  1934 ;;		line 274 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1937 ;;		 -> sprintf@f(6), 
  1938 ;;  d               8   29[COMRAM] long long 
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;  n               8   53[COMRAM] long long 
  1941 ;;  i               2   61[COMRAM] int 
  1942 ;;  s               2   51[COMRAM] int 
  1943 ;;  w               2   49[COMRAM] int 
  1944 ;;  p               2   47[COMRAM] int 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  2   27[COMRAM] int 
  1947 ;; Registers used:
  1948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1954 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;Total ram usage:       36 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    4
  1961 ;; This function calls:
  1962 ;;		___aodiv
  1963 ;;		___aomod
  1964 ;;		_abs
  1965 ;;		_pad
  1966 ;; This function is called by:
  1967 ;;		_vfpfcnvrt
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text7
  1972  00139A                     __ptext7:
  1973                           	opt callstack 0
  1974  00139A                     _dtoa:
  1975                           	opt callstack 21
  1976                           
  1977                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 274: static int dtoa(FILE *fp
      +                          , long long d);/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 275: {;/opt/mic
      +                          rochip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 276:     int i, p, s, w;;/opt/microchi
      +                          p/xc8/v2.05/pic/sources/c99/common/doprnt.c: 277:     long long n;;/opt/microchip/xc8/v2
      +                          .05/pic/sources/c99/common/doprnt.c: 280:     n = d;
  1978                           
  1979                           ;incstack = 0
  1980  00139A  C01E  F036         	movff	dtoa@d,dtoa@n
  1981  00139E  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1982  0013A2  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1983  0013A6  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1984  0013AA  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1985  0013AE  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1986  0013B2  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1987  0013B6  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1988                           
  1989                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ? 1 : 0;
  1990  0013BA  AE3D               	btfss	dtoa@n+7,7,c
  1991  0013BC  D002               	goto	u1130
  1992  0013BE  0E01               	movlw	1
  1993  0013C0  D001               	goto	u1140
  1994  0013C2                     u1130:
  1995  0013C2  0E00               	movlw	0
  1996  0013C4                     u1140:
  1997  0013C4  6E34               	movwf	dtoa@s,c
  1998  0013C6  6A35               	clrf	dtoa@s+1,c
  1999                           
  2000                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  2001  0013C8  5034               	movf	dtoa@s,w,c
  2002  0013CA  1035               	iorwf	dtoa@s+1,w,c
  2003  0013CC  B4D8               	btfsc	status,2,c
  2004  0013CE  D010               	goto	l1786
  2005                           
  2006                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  2007  0013D0  1E3D               	comf	dtoa@n+7,f,c
  2008  0013D2  1E3C               	comf	dtoa@n+6,f,c
  2009  0013D4  1E3B               	comf	dtoa@n+5,f,c
  2010  0013D6  1E3A               	comf	dtoa@n+4,f,c
  2011  0013D8  1E39               	comf	dtoa@n+3,f,c
  2012  0013DA  1E38               	comf	dtoa@n+2,f,c
  2013  0013DC  1E37               	comf	dtoa@n+1,f,c
  2014  0013DE  6C36               	negf	dtoa@n,c
  2015  0013E0  0E00               	movlw	0
  2016  0013E2  2237               	addwfc	dtoa@n+1,f,c
  2017  0013E4  2238               	addwfc	dtoa@n+2,f,c
  2018  0013E6  2239               	addwfc	dtoa@n+3,f,c
  2019  0013E8  223A               	addwfc	dtoa@n+4,f,c
  2020  0013EA  223B               	addwfc	dtoa@n+5,f,c
  2021  0013EC  223C               	addwfc	dtoa@n+6,f,c
  2022  0013EE  223D               	addwfc	dtoa@n+7,f,c
  2023  0013F0                     l1786:
  2024                           
  2025                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 287:     if (!(prec < 0)) {
  2026  0013F0  AE79               	btfss	_prec+1,7,c
  2027                           
  2028                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 288:         flags &= ~(1 << 
      +                          1);
  2029  0013F2  927A               	bcf	_flags,1,c
  2030                           
  2031                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 290:     p = (0 < prec) ? pre
      +                          c : 1;
  2032  0013F4  BE79               	btfsc	_prec+1,7,c
  2033  0013F6  D005               	goto	u1170
  2034  0013F8  5079               	movf	_prec+1,w,c
  2035  0013FA  E108               	bnz	l164
  2036  0013FC  0478               	decf	_prec,w,c
  2037  0013FE  B0D8               	btfsc	status,0,c
  2038  001400  D005               	goto	l164
  2039  001402                     u1170:
  2040  001402  0E00               	movlw	0
  2041  001404  6E31               	movwf	dtoa@p+1,c
  2042  001406  0E01               	movlw	1
  2043  001408  6E30               	movwf	dtoa@p,c
  2044  00140A  D004               	goto	l166
  2045  00140C                     l164:
  2046  00140C  C078  F030         	movff	_prec,dtoa@p
  2047  001410  C079  F031         	movff	_prec+1,dtoa@p+1
  2048  001414                     l166:
  2049                           
  2050                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 291:     w = width;
  2051  001414  C076  F032         	movff	_width,dtoa@w
  2052  001418  C077  F033         	movff	_width+1,dtoa@w+1
  2053                           
  2054                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 292:     if (s || (flags & (1
      +                           << 2))) {
  2055  00141C  5034               	movf	dtoa@s,w,c
  2056  00141E  1035               	iorwf	dtoa@s+1,w,c
  2057  001420  A4D8               	btfss	status,2,c
  2058  001422  D002               	goto	u1190
  2059  001424  A47A               	btfss	_flags,2,c
  2060  001426  D003               	goto	l1800
  2061  001428                     u1190:
  2062                           
  2063                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 293:         --w;
  2064  001428  0632               	decf	dtoa@w,f,c
  2065  00142A  A0D8               	btfss	status,0,c
  2066  00142C  0633               	decf	dtoa@w+1,f,c
  2067  00142E                     l1800:
  2068                           
  2069                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(dbuf) - 1
      +                          ;
  2070  00142E  0E00               	movlw	0
  2071  001430  6E3F               	movwf	dtoa@i+1,c
  2072  001432  0E1F               	movlw	31
  2073  001434  6E3E               	movwf	dtoa@i,c
  2074                           
  2075                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '\0';
  2076  001436  0E00               	movlw	0
  2077  001438  0100               	movlb	0	; () banked
  2078  00143A  6FE3               	movwf	(_dbuf+31)& (0+255),b
  2079                           
  2080                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2081  00143C  D07C               	goto	l1814
  2082  00143E                     l1804:
  2083                           
  2084                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 300:         --i;
  2085  00143E  063E               	decf	dtoa@i,f,c
  2086  001440  A0D8               	btfss	status,0,c
  2087  001442  063F               	decf	dtoa@i+1,f,c
  2088                           
  2089                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 301:         dbuf[i] = '0' + 
      +                          abs(n % 10);
  2090  001444  0EC4               	movlw	low _dbuf
  2091  001446  243E               	addwf	dtoa@i,w,c
  2092  001448  6ED9               	movwf	fsr2l,c
  2093  00144A  0E00               	movlw	high _dbuf
  2094  00144C  203F               	addwfc	dtoa@i+1,w,c
  2095  00144E  6EDA               	movwf	fsr2h,c
  2096  001450  C036  F001         	movff	dtoa@n,___aomod@dividend
  2097  001454  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2098  001458  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2099  00145C  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2100  001460  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2101  001464  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2102  001468  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2103  00146C  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2104  001470  0E0A               	movlw	10
  2105  001472  6E09               	movwf	___aomod@divisor,c
  2106  001474  0E00               	movlw	0
  2107  001476  6E0A               	movwf	___aomod@divisor+1,c
  2108  001478  0E00               	movlw	0
  2109  00147A  6E0B               	movwf	___aomod@divisor+2,c
  2110  00147C  0E00               	movlw	0
  2111  00147E  6E0C               	movwf	___aomod@divisor+3,c
  2112  001480  0E00               	movlw	0
  2113  001482  6E0D               	movwf	___aomod@divisor+4,c
  2114  001484  0E00               	movlw	0
  2115  001486  6E0E               	movwf	___aomod@divisor+5,c
  2116  001488  0E00               	movlw	0
  2117  00148A  6E0F               	movwf	___aomod@divisor+6,c
  2118  00148C  0E00               	movlw	0
  2119  00148E  6E10               	movwf	___aomod@divisor+7,c
  2120  001490  EC32  F00C         	call	___aomod	;wreg free
  2121  001494  C001  F026         	movff	?___aomod,??_dtoa
  2122  001498  C002  F027         	movff	?___aomod+1,??_dtoa+1
  2123  00149C  C003  F028         	movff	?___aomod+2,??_dtoa+2
  2124  0014A0  C004  F029         	movff	?___aomod+3,??_dtoa+3
  2125  0014A4  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  2126  0014A8  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  2127  0014AC  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  2128  0014B0  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  2129  0014B4  C026  F013         	movff	??_dtoa,abs@a
  2130  0014B8  C028  F014         	movff	??_dtoa+2,abs@a+1
  2131  0014BC  EC8A  F00F         	call	_abs	;wreg free
  2132  0014C0  5013               	movf	?_abs,w,c
  2133  0014C2  0F30               	addlw	48
  2134  0014C4  6EDF               	movwf	indf2,c
  2135                           
  2136                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 302:         --p;
  2137  0014C6  0630               	decf	dtoa@p,f,c
  2138  0014C8  A0D8               	btfss	status,0,c
  2139  0014CA  0631               	decf	dtoa@p+1,f,c
  2140                           
  2141                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 303:         --w;
  2142  0014CC  0632               	decf	dtoa@w,f,c
  2143  0014CE  A0D8               	btfss	status,0,c
  2144  0014D0  0633               	decf	dtoa@w+1,f,c
  2145                           
  2146                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 304:         n = n / 10;
  2147  0014D2  C036  F001         	movff	dtoa@n,___aodiv@dividend
  2148  0014D6  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2149  0014DA  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2150  0014DE  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2151  0014E2  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2152  0014E6  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2153  0014EA  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2154  0014EE  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2155  0014F2  0E0A               	movlw	10
  2156  0014F4  6E09               	movwf	___aodiv@divisor,c
  2157  0014F6  0E00               	movlw	0
  2158  0014F8  6E0A               	movwf	___aodiv@divisor+1,c
  2159  0014FA  0E00               	movlw	0
  2160  0014FC  6E0B               	movwf	___aodiv@divisor+2,c
  2161  0014FE  0E00               	movlw	0
  2162  001500  6E0C               	movwf	___aodiv@divisor+3,c
  2163  001502  0E00               	movlw	0
  2164  001504  6E0D               	movwf	___aodiv@divisor+4,c
  2165  001506  0E00               	movlw	0
  2166  001508  6E0E               	movwf	___aodiv@divisor+5,c
  2167  00150A  0E00               	movlw	0
  2168  00150C  6E0F               	movwf	___aodiv@divisor+6,c
  2169  00150E  0E00               	movlw	0
  2170  001510  6E10               	movwf	___aodiv@divisor+7,c
  2171  001512  ECEE  F00A         	call	___aodiv	;wreg free
  2172  001516  C001  F036         	movff	?___aodiv,dtoa@n
  2173  00151A  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  2174  00151E  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  2175  001522  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  2176  001526  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  2177  00152A  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  2178  00152E  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  2179  001532  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  2180  001536                     l1814:
  2181                           
  2182                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2183  001536  BE3F               	btfsc	dtoa@i+1,7,c
  2184  001538  D01F               	goto	u1240
  2185  00153A  503F               	movf	dtoa@i+1,w,c
  2186  00153C  E103               	bnz	u1200
  2187  00153E  043E               	decf	dtoa@i,w,c
  2188  001540  A0D8               	btfss	status,0,c
  2189  001542  D01A               	goto	u1240
  2190  001544                     u1200:
  2191  001544  5036               	movf	dtoa@n,w,c
  2192  001546  1037               	iorwf	dtoa@n+1,w,c
  2193  001548  1038               	iorwf	dtoa@n+2,w,c
  2194  00154A  1039               	iorwf	dtoa@n+3,w,c
  2195  00154C  103A               	iorwf	dtoa@n+4,w,c
  2196  00154E  103B               	iorwf	dtoa@n+5,w,c
  2197  001550  103C               	iorwf	dtoa@n+6,w,c
  2198  001552  103D               	iorwf	dtoa@n+7,w,c
  2199  001554  A4D8               	btfss	status,2,c
  2200  001556  D773               	goto	l1804
  2201  001558  BE31               	btfsc	dtoa@p+1,7,c
  2202  00155A  D005               	goto	u1220
  2203  00155C  5031               	movf	dtoa@p+1,w,c
  2204  00155E  E102               	bnz	u1221
  2205  001560  0430               	decf	dtoa@p,w,c
  2206  001562  B0D8               	btfsc	status,0,c
  2207  001564                     u1221:
  2208  001564  D76C               	goto	l1804
  2209  001566                     u1220:
  2210  001566  BE33               	btfsc	dtoa@w+1,7,c
  2211  001568  D007               	goto	u1240
  2212  00156A  5033               	movf	dtoa@w+1,w,c
  2213  00156C  E103               	bnz	u1230
  2214  00156E  0432               	decf	dtoa@w,w,c
  2215  001570  A0D8               	btfss	status,0,c
  2216  001572  D002               	goto	u1240
  2217  001574                     u1230:
  2218  001574  B27A               	btfsc	_flags,1,c
  2219  001576  D763               	goto	l1804
  2220  001578                     u1240:
  2221                           
  2222                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 308:     if (s || (flags & (1
      +                           << 2))) {
  2223  001578  5034               	movf	dtoa@s,w,c
  2224  00157A  1035               	iorwf	dtoa@s+1,w,c
  2225  00157C  A4D8               	btfss	status,2,c
  2226  00157E  D002               	goto	u1260
  2227  001580  A47A               	btfss	_flags,2,c
  2228  001582  D017               	goto	l1838
  2229  001584                     u1260:
  2230                           
  2231                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 309:         --i;
  2232  001584  063E               	decf	dtoa@i,f,c
  2233  001586  A0D8               	btfss	status,0,c
  2234  001588  063F               	decf	dtoa@i+1,f,c
  2235                           
  2236                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 310:         dbuf[i] = s ? '-
      +                          ' : '+';
  2237  00158A  5034               	movf	dtoa@s,w,c
  2238  00158C  1035               	iorwf	dtoa@s+1,w,c
  2239  00158E  A4D8               	btfss	status,2,c
  2240  001590  D004               	goto	l1834
  2241  001592  0E00               	movlw	0
  2242  001594  6E2F               	movwf	_dtoa$398+1,c
  2243  001596  0E2B               	movlw	43
  2244  001598  D003               	goto	L2
  2245  00159A                     l1834:
  2246  00159A  0E00               	movlw	0
  2247  00159C  6E2F               	movwf	_dtoa$398+1,c
  2248  00159E  0E2D               	movlw	45
  2249  0015A0                     L2:
  2250  0015A0  6E2E               	movwf	_dtoa$398,c
  2251  0015A2  0EC4               	movlw	low _dbuf
  2252  0015A4  243E               	addwf	dtoa@i,w,c
  2253  0015A6  6ED9               	movwf	fsr2l,c
  2254  0015A8  0E00               	movlw	high _dbuf
  2255  0015AA  203F               	addwfc	dtoa@i+1,w,c
  2256  0015AC  6EDA               	movwf	fsr2h,c
  2257  0015AE  C02E  FFDF         	movff	_dtoa$398,indf2
  2258  0015B2                     l1838:
  2259                           
  2260                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 314:     return pad(fp, &dbuf
      +                          [i], w);
  2261  0015B2  C01C  F011         	movff	dtoa@fp,pad@fp
  2262  0015B6  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  2263  0015BA  0EC4               	movlw	low _dbuf
  2264  0015BC  243E               	addwf	dtoa@i,w,c
  2265  0015BE  6E13               	movwf	pad@buf,c
  2266  0015C0  0E00               	movlw	high _dbuf
  2267  0015C2  203F               	addwfc	dtoa@i+1,w,c
  2268  0015C4  6E14               	movwf	pad@buf+1,c
  2269  0015C6  C032  F015         	movff	dtoa@w,pad@p
  2270  0015CA  C033  F016         	movff	dtoa@w+1,pad@p+1
  2271  0015CE  EC32  F00E         	call	_pad	;wreg free
  2272  0015D2  C011  F01C         	movff	?_pad,?_dtoa
  2273  0015D6  C012  F01D         	movff	?_pad+1,?_dtoa+1
  2274  0015DA  0012               	return		;funcret
  2275  0015DC                     __end_of_dtoa:
  2276                           	opt callstack 0
  2277                           
  2278 ;; *************** function _pad *****************
  2279 ;; Defined at:
  2280 ;;		line 72 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  2283 ;;		 -> sprintf@f(6), 
  2284 ;;  buf             2   18[COMRAM] PTR unsigned char 
  2285 ;;		 -> dbuf(32), 
  2286 ;;  p               2   20[COMRAM] int 
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;  w               2   25[COMRAM] int 
  2289 ;;  i               2   23[COMRAM] int 
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  2   16[COMRAM] int 
  2292 ;; Registers used:
  2293 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2299 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;Total ram usage:       11 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    3
  2306 ;; This function calls:
  2307 ;;		_fputc
  2308 ;;		_fputs
  2309 ;;		_strlen
  2310 ;; This function is called by:
  2311 ;;		_dtoa
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           	psect	text8
  2316  001C64                     __ptext8:
  2317                           	opt callstack 0
  2318  001C64                     _pad:
  2319                           	opt callstack 21
  2320                           
  2321                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 72: static int pad(FILE *fp, 
      +                          char *buf, int p);/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 73: {;/opt/m
      +                          icrochip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 74:     int i, w;;/opt/microchip/xc8
      +                          /v2.05/pic/sources/c99/common/doprnt.c: 77:     if (flags & (1 << 0)) {
  2322                           
  2323                           ;incstack = 0
  2324  001C64  A07A               	btfss	_flags,0,c
  2325  001C66  D00A               	goto	l1656
  2326                           
  2327                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 78:         fputs((const char
      +                           *)buf, fp);
  2328  001C68  C013  F00A         	movff	pad@buf,fputs@s
  2329  001C6C  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2330  001C70  C011  F00C         	movff	pad@fp,fputs@fp
  2331  001C74  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2332  001C78  EC6E  F00F         	call	_fputs	;wreg free
  2333  001C7C                     l1656:
  2334                           
  2335                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) ? 0 : p;
  2336  001C7C  BE16               	btfsc	pad@p+1,7,c
  2337  001C7E  D005               	goto	l1660
  2338  001C80  C015  F01A         	movff	pad@p,pad@w
  2339  001C84  C016  F01B         	movff	pad@p+1,pad@w+1
  2340  001C88  D004               	goto	l153
  2341  001C8A                     l1660:
  2342  001C8A  0E00               	movlw	0
  2343  001C8C  6E1B               	movwf	pad@w+1,c
  2344  001C8E  0E00               	movlw	0
  2345  001C90  6E1A               	movwf	pad@w,c
  2346  001C92                     l153:
  2347                           
  2348                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  2349  001C92  0E00               	movlw	0
  2350  001C94  6E19               	movwf	pad@i+1,c
  2351  001C96  0E00               	movlw	0
  2352  001C98  6E18               	movwf	pad@i,c
  2353                           
  2354                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  2355  001C9A  D00C               	goto	l1666
  2356  001C9C                     l1662:
  2357                           
  2358                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 85:         fputc(' ', fp);
  2359  001C9C  0E00               	movlw	0
  2360  001C9E  6E02               	movwf	fputc@c+1,c
  2361  001CA0  0E20               	movlw	32
  2362  001CA2  6E01               	movwf	fputc@c,c
  2363  001CA4  C011  F003         	movff	pad@fp,fputc@fp
  2364  001CA8  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2365  001CAC  ECE2  F00D         	call	_fputc	;wreg free
  2366                           
  2367                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 86:         ++i;
  2368  001CB0  4A18               	infsnz	pad@i,f,c
  2369  001CB2  2A19               	incf	pad@i+1,f,c
  2370  001CB4                     l1666:
  2371                           
  2372                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  2373  001CB4  501A               	movf	pad@w,w,c
  2374  001CB6  5C18               	subwf	pad@i,w,c
  2375  001CB8  5019               	movf	pad@i+1,w,c
  2376  001CBA  0A80               	xorlw	128
  2377  001CBC  6E17               	movwf	??_pad& (0+255),c
  2378  001CBE  501B               	movf	pad@w+1,w,c
  2379  001CC0  0A80               	xorlw	128
  2380  001CC2  5817               	subwfb	??_pad& (0+255),w,c
  2381  001CC4  A0D8               	btfss	status,0,c
  2382  001CC6  D7EA               	goto	l1662
  2383                           
  2384                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 90:     if (!(flags & (1 << 0
      +                          ))) {
  2385  001CC8  B07A               	btfsc	_flags,0,c
  2386  001CCA  D00A               	goto	l1670
  2387                           
  2388                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 91:         fputs((const char
      +                           *)buf, fp);
  2389  001CCC  C013  F00A         	movff	pad@buf,fputs@s
  2390  001CD0  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2391  001CD4  C011  F00C         	movff	pad@fp,fputs@fp
  2392  001CD8  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2393  001CDC  EC6E  F00F         	call	_fputs	;wreg free
  2394  001CE0                     l1670:
  2395                           
  2396                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 94:     return strlen(buf) + 
      +                          w;
  2397  001CE0  C013  F001         	movff	pad@buf,strlen@s
  2398  001CE4  C014  F002         	movff	pad@buf+1,strlen@s+1
  2399  001CE8  ECD4  F00F         	call	_strlen	;wreg free
  2400  001CEC  501A               	movf	pad@w,w,c
  2401  001CEE  2401               	addwf	?_strlen,w,c
  2402  001CF0  6E11               	movwf	?_pad,c
  2403  001CF2  501B               	movf	pad@w+1,w,c
  2404  001CF4  2002               	addwfc	?_strlen+1,w,c
  2405  001CF6  6E12               	movwf	?_pad+1,c
  2406  001CF8  0012               	return		;funcret
  2407  001CFA                     __end_of_pad:
  2408                           	opt callstack 0
  2409                           
  2410 ;; *************** function _strlen *****************
  2411 ;; Defined at:
  2412 ;;		line 12 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/strlen.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2415 ;;		 -> dbuf(32), 
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2418 ;;		 -> dbuf(32), 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  2    0[COMRAM] unsigned int 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2428 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2432 ;;Total ram usage:        4 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; This function calls:
  2435 ;;		Nothing
  2436 ;; This function is called by:
  2437 ;;		_pad
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text9
  2442  001FA8                     __ptext9:
  2443                           	opt callstack 0
  2444  001FA8                     _strlen:
  2445                           	opt callstack 23
  2446                           
  2447                           ;incstack = 0
  2448  001FA8  C001  F003         	movff	strlen@s,strlen@a
  2449  001FAC  C002  F004         	movff	strlen@s+1,strlen@a+1
  2450  001FB0  D002               	goto	l1646
  2451  001FB2                     l1644:
  2452  001FB2  4A01               	infsnz	strlen@s,f,c
  2453  001FB4  2A02               	incf	strlen@s+1,f,c
  2454  001FB6                     l1646:
  2455  001FB6  C001  FFD9         	movff	strlen@s,fsr2l
  2456  001FBA  C002  FFDA         	movff	strlen@s+1,fsr2h
  2457  001FBE  50DF               	movf	indf2,w,c
  2458  001FC0  A4D8               	btfss	status,2,c
  2459  001FC2  D7F7               	goto	l1644
  2460  001FC4  5003               	movf	strlen@a,w,c
  2461  001FC6  5C01               	subwf	strlen@s,w,c
  2462  001FC8  6E01               	movwf	?_strlen,c
  2463  001FCA  5004               	movf	strlen@a+1,w,c
  2464  001FCC  5802               	subwfb	strlen@s+1,w,c
  2465  001FCE  6E02               	movwf	?_strlen+1,c
  2466  001FD0  0012               	return		;funcret
  2467  001FD2                     __end_of_strlen:
  2468                           	opt callstack 0
  2469                           
  2470 ;; *************** function _fputs *****************
  2471 ;; Defined at:
  2472 ;;		line 8 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputs.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2475 ;;		 -> dbuf(32), 
  2476 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2477 ;;		 -> sprintf@f(6), 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;  i               2   14[COMRAM] int 
  2480 ;;  c               1   13[COMRAM] unsigned char 
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  2    9[COMRAM] int 
  2483 ;; Registers used:
  2484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2490 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;Total ram usage:        7 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    2
  2497 ;; This function calls:
  2498 ;;		_fputc
  2499 ;; This function is called by:
  2500 ;;		_pad
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text10
  2505  001EDC                     __ptext10:
  2506                           	opt callstack 0
  2507  001EDC                     _fputs:
  2508                           	opt callstack 21
  2509                           
  2510                           ;incstack = 0
  2511  001EDC  0E00               	movlw	0
  2512  001EDE  6E10               	movwf	fputs@i+1,c
  2513  001EE0  0E00               	movlw	0
  2514  001EE2  6E0F               	movwf	fputs@i,c
  2515  001EE4  D00B               	goto	l1640
  2516  001EE6                     l1636:
  2517  001EE6  C00E  F001         	movff	fputs@c,fputc@c
  2518  001EEA  6A02               	clrf	fputc@c+1,c
  2519  001EEC  C00C  F003         	movff	fputs@fp,fputc@fp
  2520  001EF0  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2521  001EF4  ECE2  F00D         	call	_fputc	;wreg free
  2522  001EF8  4A0F               	infsnz	fputs@i,f,c
  2523  001EFA  2A10               	incf	fputs@i+1,f,c
  2524  001EFC                     l1640:
  2525  001EFC  500F               	movf	fputs@i,w,c
  2526  001EFE  240A               	addwf	fputs@s,w,c
  2527  001F00  6ED9               	movwf	fsr2l,c
  2528  001F02  5010               	movf	fputs@i+1,w,c
  2529  001F04  200B               	addwfc	fputs@s+1,w,c
  2530  001F06  6EDA               	movwf	fsr2h,c
  2531  001F08  50DF               	movf	indf2,w,c
  2532  001F0A  6E0E               	movwf	fputs@c,c
  2533  001F0C  500E               	movf	fputs@c,w,c
  2534  001F0E  B4D8               	btfsc	status,2,c
  2535  001F10  0012               	return	
  2536  001F12  D7E9               	goto	l1636
  2537  001F14                     __end_of_fputs:
  2538                           	opt callstack 0
  2539                           
  2540 ;; *************** function _fputc *****************
  2541 ;; Defined at:
  2542 ;;		line 8 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;  c               2    0[COMRAM] int 
  2545 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2546 ;;		 -> sprintf@f(6), 
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  2    0[COMRAM] int 
  2551 ;; Registers used:
  2552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2558 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;Total ram usage:        9 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    1
  2565 ;; This function calls:
  2566 ;;		_putch
  2567 ;; This function is called by:
  2568 ;;		_pad
  2569 ;;		_vfpfcnvrt
  2570 ;;		_fputs
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text11
  2575  001BC4                     __ptext11:
  2576                           	opt callstack 0
  2577  001BC4                     _fputc:
  2578                           	opt callstack 24
  2579                           
  2580                           ;incstack = 0
  2581  001BC4  5003               	movf	fputc@fp,w,c
  2582  001BC6  1004               	iorwf	fputc@fp+1,w,c
  2583  001BC8  B4D8               	btfsc	status,2,c
  2584  001BCA  D004               	goto	u860
  2585  001BCC  5003               	movf	fputc@fp,w,c
  2586  001BCE  1004               	iorwf	fputc@fp+1,w,c
  2587  001BD0  A4D8               	btfss	status,2,c
  2588  001BD2  D004               	goto	l1626
  2589  001BD4                     u860:
  2590  001BD4  5001               	movf	fputc@c,w,c
  2591  001BD6  EC23  F010         	call	_putch
  2592  001BDA  0012               	return	
  2593  001BDC                     l1626:
  2594  001BDC  EE20 F004          	lfsr	2,4
  2595  001BE0  5003               	movf	fputc@fp,w,c
  2596  001BE2  26D9               	addwf	fsr2l,f,c
  2597  001BE4  5004               	movf	fputc@fp+1,w,c
  2598  001BE6  22DA               	addwfc	fsr2h,f,c
  2599  001BE8  50DE               	movf	postinc2,w,c
  2600  001BEA  10DE               	iorwf	postinc2,w,c
  2601  001BEC  B4D8               	btfsc	status,2,c
  2602  001BEE  D016               	goto	u880
  2603  001BF0  EE20 F004          	lfsr	2,4
  2604  001BF4  5003               	movf	fputc@fp,w,c
  2605  001BF6  26D9               	addwf	fsr2l,f,c
  2606  001BF8  5004               	movf	fputc@fp+1,w,c
  2607  001BFA  22DA               	addwfc	fsr2h,f,c
  2608  001BFC  EE10 F002          	lfsr	1,2
  2609  001C00  5003               	movf	fputc@fp,w,c
  2610  001C02  26E1               	addwf	fsr1l,f,c
  2611  001C04  5004               	movf	fputc@fp+1,w,c
  2612  001C06  22E2               	addwfc	fsr1h,f,c
  2613  001C08  50DE               	movf	postinc2,w,c
  2614  001C0A  5CE6               	subwf	postinc1,w,c
  2615  001C0C  50E6               	movf	postinc1,w,c
  2616  001C0E  0A80               	xorlw	128
  2617  001C10  6E09               	movwf	(??_fputc+4)& (0+255),c
  2618  001C12  50DE               	movf	postinc2,w,c
  2619  001C14  0A80               	xorlw	128
  2620  001C16  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  2621  001C18  B0D8               	btfsc	status,0,c
  2622  001C1A  0012               	return	
  2623  001C1C                     u880:
  2624  001C1C  EE20 F002          	lfsr	2,2
  2625  001C20  5003               	movf	fputc@fp,w,c
  2626  001C22  26D9               	addwf	fsr2l,f,c
  2627  001C24  5004               	movf	fputc@fp+1,w,c
  2628  001C26  22DA               	addwfc	fsr2h,f,c
  2629  001C28  CFDE F005          	movff	postinc2,??_fputc
  2630  001C2C  CFDD F006          	movff	postdec2,??_fputc+1
  2631  001C30  C003  FFD9         	movff	fputc@fp,fsr2l
  2632  001C34  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2633  001C38  CFDE F007          	movff	postinc2,??_fputc+2
  2634  001C3C  CFDD F008          	movff	postdec2,??_fputc+3
  2635  001C40  5005               	movf	??_fputc,w,c
  2636  001C42  2407               	addwf	??_fputc+2,w,c
  2637  001C44  6ED9               	movwf	fsr2l,c
  2638  001C46  5006               	movf	??_fputc+1,w,c
  2639  001C48  2008               	addwfc	??_fputc+3,w,c
  2640  001C4A  6EDA               	movwf	fsr2h,c
  2641  001C4C  C001  FFDF         	movff	fputc@c,indf2
  2642  001C50  EE20 F002          	lfsr	2,2
  2643  001C54  5003               	movf	fputc@fp,w,c
  2644  001C56  26D9               	addwf	fsr2l,f,c
  2645  001C58  5004               	movf	fputc@fp+1,w,c
  2646  001C5A  22DA               	addwfc	fsr2h,f,c
  2647  001C5C  2ADE               	incf	postinc2,f,c
  2648  001C5E  0E00               	movlw	0
  2649  001C60  22DD               	addwfc	postdec2,f,c
  2650  001C62  0012               	return		;funcret
  2651  001C64                     __end_of_fputc:
  2652                           	opt callstack 0
  2653                           
  2654 ;; *************** function _putch *****************
  2655 ;; Defined at:
  2656 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/putch.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  c               1    wreg     unsigned char 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  c               1    0[COMRAM] unsigned char 
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;Total ram usage:        0 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; This function calls:
  2677 ;;		Nothing
  2678 ;; This function is called by:
  2679 ;;		_fputc
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text12
  2684  002046                     __ptext12:
  2685                           	opt callstack 0
  2686  002046                     _putch:
  2687                           	opt callstack 24
  2688                           
  2689                           ;incstack = 0
  2690  002046  0012               	return		;funcret
  2691  002048                     __end_of_putch:
  2692                           	opt callstack 0
  2693                           
  2694 ;; *************** function _abs *****************
  2695 ;; Defined at:
  2696 ;;		line 1 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/abs.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;  a               2   18[COMRAM] int 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;		None
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  2   18[COMRAM] int 
  2703 ;; Registers used:
  2704 ;;		wreg, status,2, status,0
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;Total ram usage:        4 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; This function calls:
  2717 ;;		Nothing
  2718 ;; This function is called by:
  2719 ;;		_dtoa
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text13
  2724  001F14                     __ptext13:
  2725                           	opt callstack 0
  2726  001F14                     _abs:
  2727                           	opt callstack 24
  2728                           
  2729                           ;incstack = 0
  2730  001F14  BE14               	btfsc	abs@a+1,7,c
  2731  001F16  D005               	goto	u950
  2732  001F18  5014               	movf	abs@a+1,w,c
  2733  001F1A  E110               	bnz	l898
  2734  001F1C  0413               	decf	abs@a,w,c
  2735  001F1E  B0D8               	btfsc	status,0,c
  2736  001F20  D00D               	goto	l898
  2737  001F22                     u950:
  2738  001F22  C013  F015         	movff	abs@a,??_abs
  2739  001F26  C014  F016         	movff	abs@a+1,??_abs+1
  2740  001F2A  1E15               	comf	??_abs,f,c
  2741  001F2C  1E16               	comf	??_abs+1,f,c
  2742  001F2E  4A15               	infsnz	??_abs,f,c
  2743  001F30  2A16               	incf	??_abs+1,f,c
  2744  001F32  C015  F013         	movff	??_abs,?_abs
  2745  001F36  C016  F014         	movff	??_abs+1,?_abs+1
  2746  001F3A  0012               	return	
  2747  001F3C                     l898:
  2748  001F3C  C013  F013         	movff	abs@a,?_abs
  2749  001F40  C014  F014         	movff	abs@a+1,?_abs+1
  2750  001F44  0012               	return		;funcret
  2751  001F46                     __end_of_abs:
  2752                           	opt callstack 0
  2753                           
  2754 ;; *************** function ___aomod *****************
  2755 ;; Defined at:
  2756 ;;		line 9 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/aomod.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  dividend        8    0[COMRAM] long long 
  2759 ;;  divisor         8    8[COMRAM] long long 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  sign            1   17[COMRAM] unsigned char 
  2762 ;;  counter         1   16[COMRAM] unsigned char 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  8    0[COMRAM] long long 
  2765 ;; Registers used:
  2766 ;;		wreg, status,2, status,0
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2772 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;Total ram usage:       18 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_dtoa
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text14
  2786  001864                     __ptext14:
  2787                           	opt callstack 0
  2788  001864                     ___aomod:
  2789                           	opt callstack 24
  2790                           
  2791                           ;incstack = 0
  2792  001864  0E00               	movlw	0
  2793  001866  6E12               	movwf	___aomod@sign,c
  2794  001868  AE08               	btfss	___aomod@dividend+7,7,c
  2795  00186A  D012               	goto	l1740
  2796  00186C  1E08               	comf	___aomod@dividend+7,f,c
  2797  00186E  1E07               	comf	___aomod@dividend+6,f,c
  2798  001870  1E06               	comf	___aomod@dividend+5,f,c
  2799  001872  1E05               	comf	___aomod@dividend+4,f,c
  2800  001874  1E04               	comf	___aomod@dividend+3,f,c
  2801  001876  1E03               	comf	___aomod@dividend+2,f,c
  2802  001878  1E02               	comf	___aomod@dividend+1,f,c
  2803  00187A  6C01               	negf	___aomod@dividend,c
  2804  00187C  0E00               	movlw	0
  2805  00187E  2202               	addwfc	___aomod@dividend+1,f,c
  2806  001880  2203               	addwfc	___aomod@dividend+2,f,c
  2807  001882  2204               	addwfc	___aomod@dividend+3,f,c
  2808  001884  2205               	addwfc	___aomod@dividend+4,f,c
  2809  001886  2206               	addwfc	___aomod@dividend+5,f,c
  2810  001888  2207               	addwfc	___aomod@dividend+6,f,c
  2811  00188A  2208               	addwfc	___aomod@dividend+7,f,c
  2812  00188C  0E01               	movlw	1
  2813  00188E  6E12               	movwf	___aomod@sign,c
  2814  001890                     l1740:
  2815  001890  AE10               	btfss	___aomod@divisor+7,7,c
  2816  001892  D010               	goto	l1744
  2817  001894  1E10               	comf	___aomod@divisor+7,f,c
  2818  001896  1E0F               	comf	___aomod@divisor+6,f,c
  2819  001898  1E0E               	comf	___aomod@divisor+5,f,c
  2820  00189A  1E0D               	comf	___aomod@divisor+4,f,c
  2821  00189C  1E0C               	comf	___aomod@divisor+3,f,c
  2822  00189E  1E0B               	comf	___aomod@divisor+2,f,c
  2823  0018A0  1E0A               	comf	___aomod@divisor+1,f,c
  2824  0018A2  6C09               	negf	___aomod@divisor,c
  2825  0018A4  0E00               	movlw	0
  2826  0018A6  220A               	addwfc	___aomod@divisor+1,f,c
  2827  0018A8  220B               	addwfc	___aomod@divisor+2,f,c
  2828  0018AA  220C               	addwfc	___aomod@divisor+3,f,c
  2829  0018AC  220D               	addwfc	___aomod@divisor+4,f,c
  2830  0018AE  220E               	addwfc	___aomod@divisor+5,f,c
  2831  0018B0  220F               	addwfc	___aomod@divisor+6,f,c
  2832  0018B2  2210               	addwfc	___aomod@divisor+7,f,c
  2833  0018B4                     l1744:
  2834  0018B4  5009               	movf	___aomod@divisor,w,c
  2835  0018B6  100A               	iorwf	___aomod@divisor+1,w,c
  2836  0018B8  100B               	iorwf	___aomod@divisor+2,w,c
  2837  0018BA  100C               	iorwf	___aomod@divisor+3,w,c
  2838  0018BC  100D               	iorwf	___aomod@divisor+4,w,c
  2839  0018BE  100E               	iorwf	___aomod@divisor+5,w,c
  2840  0018C0  100F               	iorwf	___aomod@divisor+6,w,c
  2841  0018C2  1010               	iorwf	___aomod@divisor+7,w,c
  2842  0018C4  B4D8               	btfsc	status,2,c
  2843  0018C6  D03C               	goto	l1760
  2844  0018C8  0E01               	movlw	1
  2845  0018CA  6E11               	movwf	___aomod@counter,c
  2846  0018CC  D00A               	goto	l1750
  2847  0018CE                     l1748:
  2848  0018CE  90D8               	bcf	status,0,c
  2849  0018D0  3609               	rlcf	___aomod@divisor,f,c
  2850  0018D2  360A               	rlcf	___aomod@divisor+1,f,c
  2851  0018D4  360B               	rlcf	___aomod@divisor+2,f,c
  2852  0018D6  360C               	rlcf	___aomod@divisor+3,f,c
  2853  0018D8  360D               	rlcf	___aomod@divisor+4,f,c
  2854  0018DA  360E               	rlcf	___aomod@divisor+5,f,c
  2855  0018DC  360F               	rlcf	___aomod@divisor+6,f,c
  2856  0018DE  3610               	rlcf	___aomod@divisor+7,f,c
  2857  0018E0  2A11               	incf	___aomod@counter,f,c
  2858  0018E2                     l1750:
  2859  0018E2  AE10               	btfss	___aomod@divisor+7,7,c
  2860  0018E4  D7F4               	goto	l1748
  2861  0018E6                     u1080:
  2862  0018E6  5009               	movf	___aomod@divisor,w,c
  2863  0018E8  5C01               	subwf	___aomod@dividend,w,c
  2864  0018EA  500A               	movf	___aomod@divisor+1,w,c
  2865  0018EC  5802               	subwfb	___aomod@dividend+1,w,c
  2866  0018EE  500B               	movf	___aomod@divisor+2,w,c
  2867  0018F0  5803               	subwfb	___aomod@dividend+2,w,c
  2868  0018F2  500C               	movf	___aomod@divisor+3,w,c
  2869  0018F4  5804               	subwfb	___aomod@dividend+3,w,c
  2870  0018F6  500D               	movf	___aomod@divisor+4,w,c
  2871  0018F8  5805               	subwfb	___aomod@dividend+4,w,c
  2872  0018FA  500E               	movf	___aomod@divisor+5,w,c
  2873  0018FC  5806               	subwfb	___aomod@dividend+5,w,c
  2874  0018FE  500F               	movf	___aomod@divisor+6,w,c
  2875  001900  5807               	subwfb	___aomod@dividend+6,w,c
  2876  001902  5010               	movf	___aomod@divisor+7,w,c
  2877  001904  5808               	subwfb	___aomod@dividend+7,w,c
  2878  001906  A0D8               	btfss	status,0,c
  2879  001908  D010               	goto	l1756
  2880  00190A  5009               	movf	___aomod@divisor,w,c
  2881  00190C  5E01               	subwf	___aomod@dividend,f,c
  2882  00190E  500A               	movf	___aomod@divisor+1,w,c
  2883  001910  5A02               	subwfb	___aomod@dividend+1,f,c
  2884  001912  500B               	movf	___aomod@divisor+2,w,c
  2885  001914  5A03               	subwfb	___aomod@dividend+2,f,c
  2886  001916  500C               	movf	___aomod@divisor+3,w,c
  2887  001918  5A04               	subwfb	___aomod@dividend+3,f,c
  2888  00191A  500D               	movf	___aomod@divisor+4,w,c
  2889  00191C  5A05               	subwfb	___aomod@dividend+4,f,c
  2890  00191E  500E               	movf	___aomod@divisor+5,w,c
  2891  001920  5A06               	subwfb	___aomod@dividend+5,f,c
  2892  001922  500F               	movf	___aomod@divisor+6,w,c
  2893  001924  5A07               	subwfb	___aomod@dividend+6,f,c
  2894  001926  5010               	movf	___aomod@divisor+7,w,c
  2895  001928  5A08               	subwfb	___aomod@dividend+7,f,c
  2896  00192A                     l1756:
  2897  00192A  90D8               	bcf	status,0,c
  2898  00192C  3210               	rrcf	___aomod@divisor+7,f,c
  2899  00192E  320F               	rrcf	___aomod@divisor+6,f,c
  2900  001930  320E               	rrcf	___aomod@divisor+5,f,c
  2901  001932  320D               	rrcf	___aomod@divisor+4,f,c
  2902  001934  320C               	rrcf	___aomod@divisor+3,f,c
  2903  001936  320B               	rrcf	___aomod@divisor+2,f,c
  2904  001938  320A               	rrcf	___aomod@divisor+1,f,c
  2905  00193A  3209               	rrcf	___aomod@divisor,f,c
  2906  00193C  2E11               	decfsz	___aomod@counter,f,c
  2907  00193E  D7D3               	goto	u1080
  2908  001940                     l1760:
  2909  001940  5012               	movf	___aomod@sign,w,c
  2910  001942  B4D8               	btfsc	status,2,c
  2911  001944  D010               	goto	l1764
  2912  001946  1E08               	comf	___aomod@dividend+7,f,c
  2913  001948  1E07               	comf	___aomod@dividend+6,f,c
  2914  00194A  1E06               	comf	___aomod@dividend+5,f,c
  2915  00194C  1E05               	comf	___aomod@dividend+4,f,c
  2916  00194E  1E04               	comf	___aomod@dividend+3,f,c
  2917  001950  1E03               	comf	___aomod@dividend+2,f,c
  2918  001952  1E02               	comf	___aomod@dividend+1,f,c
  2919  001954  6C01               	negf	___aomod@dividend,c
  2920  001956  0E00               	movlw	0
  2921  001958  2202               	addwfc	___aomod@dividend+1,f,c
  2922  00195A  2203               	addwfc	___aomod@dividend+2,f,c
  2923  00195C  2204               	addwfc	___aomod@dividend+3,f,c
  2924  00195E  2205               	addwfc	___aomod@dividend+4,f,c
  2925  001960  2206               	addwfc	___aomod@dividend+5,f,c
  2926  001962  2207               	addwfc	___aomod@dividend+6,f,c
  2927  001964  2208               	addwfc	___aomod@dividend+7,f,c
  2928  001966                     l1764:
  2929  001966  C001  F001         	movff	___aomod@dividend,?___aomod
  2930  00196A  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2931  00196E  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2932  001972  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2933  001976  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2934  00197A  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2935  00197E  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2936  001982  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2937  001986  0012               	return		;funcret
  2938  001988                     __end_of___aomod:
  2939                           	opt callstack 0
  2940                           
  2941 ;; *************** function ___aodiv *****************
  2942 ;; Defined at:
  2943 ;;		line 9 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/aodiv.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;  dividend        8    0[COMRAM] long long 
  2946 ;;  divisor         8    8[COMRAM] long long 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;  quotient        8   18[COMRAM] long long 
  2949 ;;  sign            1   17[COMRAM] unsigned char 
  2950 ;;  counter         1   16[COMRAM] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  8    0[COMRAM] long long 
  2953 ;; Registers used:
  2954 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2960 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2961 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;Total ram usage:       26 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_dtoa
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text15
  2974  0015DC                     __ptext15:
  2975                           	opt callstack 0
  2976  0015DC                     ___aodiv:
  2977                           	opt callstack 24
  2978                           
  2979                           ;incstack = 0
  2980  0015DC  0E00               	movlw	0
  2981  0015DE  6E12               	movwf	___aodiv@sign,c
  2982  0015E0  AE10               	btfss	___aodiv@divisor+7,7,c
  2983  0015E2  D012               	goto	l1696
  2984  0015E4  1E10               	comf	___aodiv@divisor+7,f,c
  2985  0015E6  1E0F               	comf	___aodiv@divisor+6,f,c
  2986  0015E8  1E0E               	comf	___aodiv@divisor+5,f,c
  2987  0015EA  1E0D               	comf	___aodiv@divisor+4,f,c
  2988  0015EC  1E0C               	comf	___aodiv@divisor+3,f,c
  2989  0015EE  1E0B               	comf	___aodiv@divisor+2,f,c
  2990  0015F0  1E0A               	comf	___aodiv@divisor+1,f,c
  2991  0015F2  6C09               	negf	___aodiv@divisor,c
  2992  0015F4  0E00               	movlw	0
  2993  0015F6  220A               	addwfc	___aodiv@divisor+1,f,c
  2994  0015F8  220B               	addwfc	___aodiv@divisor+2,f,c
  2995  0015FA  220C               	addwfc	___aodiv@divisor+3,f,c
  2996  0015FC  220D               	addwfc	___aodiv@divisor+4,f,c
  2997  0015FE  220E               	addwfc	___aodiv@divisor+5,f,c
  2998  001600  220F               	addwfc	___aodiv@divisor+6,f,c
  2999  001602  2210               	addwfc	___aodiv@divisor+7,f,c
  3000  001604  0E01               	movlw	1
  3001  001606  6E12               	movwf	___aodiv@sign,c
  3002  001608                     l1696:
  3003  001608  AE08               	btfss	___aodiv@dividend+7,7,c
  3004  00160A  D012               	goto	l1702
  3005  00160C  1E08               	comf	___aodiv@dividend+7,f,c
  3006  00160E  1E07               	comf	___aodiv@dividend+6,f,c
  3007  001610  1E06               	comf	___aodiv@dividend+5,f,c
  3008  001612  1E05               	comf	___aodiv@dividend+4,f,c
  3009  001614  1E04               	comf	___aodiv@dividend+3,f,c
  3010  001616  1E03               	comf	___aodiv@dividend+2,f,c
  3011  001618  1E02               	comf	___aodiv@dividend+1,f,c
  3012  00161A  6C01               	negf	___aodiv@dividend,c
  3013  00161C  0E00               	movlw	0
  3014  00161E  2202               	addwfc	___aodiv@dividend+1,f,c
  3015  001620  2203               	addwfc	___aodiv@dividend+2,f,c
  3016  001622  2204               	addwfc	___aodiv@dividend+3,f,c
  3017  001624  2205               	addwfc	___aodiv@dividend+4,f,c
  3018  001626  2206               	addwfc	___aodiv@dividend+5,f,c
  3019  001628  2207               	addwfc	___aodiv@dividend+6,f,c
  3020  00162A  2208               	addwfc	___aodiv@dividend+7,f,c
  3021  00162C  0E01               	movlw	1
  3022  00162E  1A12               	xorwf	___aodiv@sign,f,c
  3023  001630                     l1702:
  3024  001630  EE20  F013         	lfsr	2,___aodiv@quotient
  3025  001634  0E07               	movlw	7
  3026  001636                     u1001:
  3027  001636  6ADE               	clrf	postinc2,c
  3028  001638  06E8               	decf	wreg,f,c
  3029  00163A  E2FD               	bc	u1001
  3030  00163C  5009               	movf	___aodiv@divisor,w,c
  3031  00163E  100A               	iorwf	___aodiv@divisor+1,w,c
  3032  001640  100B               	iorwf	___aodiv@divisor+2,w,c
  3033  001642  100C               	iorwf	___aodiv@divisor+3,w,c
  3034  001644  100D               	iorwf	___aodiv@divisor+4,w,c
  3035  001646  100E               	iorwf	___aodiv@divisor+5,w,c
  3036  001648  100F               	iorwf	___aodiv@divisor+6,w,c
  3037  00164A  1010               	iorwf	___aodiv@divisor+7,w,c
  3038  00164C  B4D8               	btfsc	status,2,c
  3039  00164E  D046               	goto	l1724
  3040  001650  0E01               	movlw	1
  3041  001652  6E11               	movwf	___aodiv@counter,c
  3042  001654  D00A               	goto	l1710
  3043  001656                     l1708:
  3044  001656  90D8               	bcf	status,0,c
  3045  001658  3609               	rlcf	___aodiv@divisor,f,c
  3046  00165A  360A               	rlcf	___aodiv@divisor+1,f,c
  3047  00165C  360B               	rlcf	___aodiv@divisor+2,f,c
  3048  00165E  360C               	rlcf	___aodiv@divisor+3,f,c
  3049  001660  360D               	rlcf	___aodiv@divisor+4,f,c
  3050  001662  360E               	rlcf	___aodiv@divisor+5,f,c
  3051  001664  360F               	rlcf	___aodiv@divisor+6,f,c
  3052  001666  3610               	rlcf	___aodiv@divisor+7,f,c
  3053  001668  2A11               	incf	___aodiv@counter,f,c
  3054  00166A                     l1710:
  3055  00166A  AE10               	btfss	___aodiv@divisor+7,7,c
  3056  00166C  D7F4               	goto	l1708
  3057  00166E                     u1020:
  3058  00166E  90D8               	bcf	status,0,c
  3059  001670  3613               	rlcf	___aodiv@quotient,f,c
  3060  001672  3614               	rlcf	___aodiv@quotient+1,f,c
  3061  001674  3615               	rlcf	___aodiv@quotient+2,f,c
  3062  001676  3616               	rlcf	___aodiv@quotient+3,f,c
  3063  001678  3617               	rlcf	___aodiv@quotient+4,f,c
  3064  00167A  3618               	rlcf	___aodiv@quotient+5,f,c
  3065  00167C  3619               	rlcf	___aodiv@quotient+6,f,c
  3066  00167E  361A               	rlcf	___aodiv@quotient+7,f,c
  3067  001680  5009               	movf	___aodiv@divisor,w,c
  3068  001682  5C01               	subwf	___aodiv@dividend,w,c
  3069  001684  500A               	movf	___aodiv@divisor+1,w,c
  3070  001686  5802               	subwfb	___aodiv@dividend+1,w,c
  3071  001688  500B               	movf	___aodiv@divisor+2,w,c
  3072  00168A  5803               	subwfb	___aodiv@dividend+2,w,c
  3073  00168C  500C               	movf	___aodiv@divisor+3,w,c
  3074  00168E  5804               	subwfb	___aodiv@dividend+3,w,c
  3075  001690  500D               	movf	___aodiv@divisor+4,w,c
  3076  001692  5805               	subwfb	___aodiv@dividend+4,w,c
  3077  001694  500E               	movf	___aodiv@divisor+5,w,c
  3078  001696  5806               	subwfb	___aodiv@dividend+5,w,c
  3079  001698  500F               	movf	___aodiv@divisor+6,w,c
  3080  00169A  5807               	subwfb	___aodiv@dividend+6,w,c
  3081  00169C  5010               	movf	___aodiv@divisor+7,w,c
  3082  00169E  5808               	subwfb	___aodiv@dividend+7,w,c
  3083  0016A0  A0D8               	btfss	status,0,c
  3084  0016A2  D011               	goto	l1720
  3085  0016A4  5009               	movf	___aodiv@divisor,w,c
  3086  0016A6  5E01               	subwf	___aodiv@dividend,f,c
  3087  0016A8  500A               	movf	___aodiv@divisor+1,w,c
  3088  0016AA  5A02               	subwfb	___aodiv@dividend+1,f,c
  3089  0016AC  500B               	movf	___aodiv@divisor+2,w,c
  3090  0016AE  5A03               	subwfb	___aodiv@dividend+2,f,c
  3091  0016B0  500C               	movf	___aodiv@divisor+3,w,c
  3092  0016B2  5A04               	subwfb	___aodiv@dividend+3,f,c
  3093  0016B4  500D               	movf	___aodiv@divisor+4,w,c
  3094  0016B6  5A05               	subwfb	___aodiv@dividend+4,f,c
  3095  0016B8  500E               	movf	___aodiv@divisor+5,w,c
  3096  0016BA  5A06               	subwfb	___aodiv@dividend+5,f,c
  3097  0016BC  500F               	movf	___aodiv@divisor+6,w,c
  3098  0016BE  5A07               	subwfb	___aodiv@dividend+6,f,c
  3099  0016C0  5010               	movf	___aodiv@divisor+7,w,c
  3100  0016C2  5A08               	subwfb	___aodiv@dividend+7,f,c
  3101  0016C4  8013               	bsf	___aodiv@quotient,0,c
  3102  0016C6                     l1720:
  3103  0016C6  90D8               	bcf	status,0,c
  3104  0016C8  3210               	rrcf	___aodiv@divisor+7,f,c
  3105  0016CA  320F               	rrcf	___aodiv@divisor+6,f,c
  3106  0016CC  320E               	rrcf	___aodiv@divisor+5,f,c
  3107  0016CE  320D               	rrcf	___aodiv@divisor+4,f,c
  3108  0016D0  320C               	rrcf	___aodiv@divisor+3,f,c
  3109  0016D2  320B               	rrcf	___aodiv@divisor+2,f,c
  3110  0016D4  320A               	rrcf	___aodiv@divisor+1,f,c
  3111  0016D6  3209               	rrcf	___aodiv@divisor,f,c
  3112  0016D8  2E11               	decfsz	___aodiv@counter,f,c
  3113  0016DA  D7C9               	goto	u1020
  3114  0016DC                     l1724:
  3115  0016DC  5012               	movf	___aodiv@sign,w,c
  3116  0016DE  B4D8               	btfsc	status,2,c
  3117  0016E0  D010               	goto	l1728
  3118  0016E2  1E1A               	comf	___aodiv@quotient+7,f,c
  3119  0016E4  1E19               	comf	___aodiv@quotient+6,f,c
  3120  0016E6  1E18               	comf	___aodiv@quotient+5,f,c
  3121  0016E8  1E17               	comf	___aodiv@quotient+4,f,c
  3122  0016EA  1E16               	comf	___aodiv@quotient+3,f,c
  3123  0016EC  1E15               	comf	___aodiv@quotient+2,f,c
  3124  0016EE  1E14               	comf	___aodiv@quotient+1,f,c
  3125  0016F0  6C13               	negf	___aodiv@quotient,c
  3126  0016F2  0E00               	movlw	0
  3127  0016F4  2214               	addwfc	___aodiv@quotient+1,f,c
  3128  0016F6  2215               	addwfc	___aodiv@quotient+2,f,c
  3129  0016F8  2216               	addwfc	___aodiv@quotient+3,f,c
  3130  0016FA  2217               	addwfc	___aodiv@quotient+4,f,c
  3131  0016FC  2218               	addwfc	___aodiv@quotient+5,f,c
  3132  0016FE  2219               	addwfc	___aodiv@quotient+6,f,c
  3133  001700  221A               	addwfc	___aodiv@quotient+7,f,c
  3134  001702                     l1728:
  3135  001702  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3136  001706  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3137  00170A  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3138  00170E  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3139  001712  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3140  001716  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3141  00171A  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3142  00171E  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3143  001722  0012               	return		;funcret
  3144  001724                     __end_of___aodiv:
  3145                           	opt callstack 0
  3146                           
  3147 ;; *************** function _atoi *****************
  3148 ;; Defined at:
  3149 ;;		line 4 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/atoi.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;  s               2    7[COMRAM] PTR const unsigned char 
  3152 ;;		 -> STR_5(26), STR_1(26), 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;  n               2   20[COMRAM] int 
  3155 ;;  neg             2   13[COMRAM] int 
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  2    7[COMRAM] int 
  3158 ;; Registers used:
  3159 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3165 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;Total ram usage:       15 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    1
  3172 ;; This function calls:
  3173 ;;		___wmul
  3174 ;;		_isdigit
  3175 ;;		_isspace
  3176 ;; This function is called by:
  3177 ;;		_vfpfcnvrt
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text16
  3182  001724                     __ptext16:
  3183                           	opt callstack 0
  3184  001724                     _atoi:
  3185                           	opt callstack 24
  3186                           
  3187                           ;incstack = 0
  3188  001724  0E00               	movlw	0
  3189  001726  6E16               	movwf	atoi@n+1,c
  3190  001728  0E00               	movlw	0
  3191  00172A  6E15               	movwf	atoi@n,c
  3192  00172C  0E00               	movlw	0
  3193  00172E  6E0F               	movwf	atoi@neg+1,c
  3194  001730  0E00               	movlw	0
  3195  001732  6E0E               	movwf	atoi@neg,c
  3196  001734  D002               	goto	l1846
  3197  001736                     l1844:
  3198  001736  4A08               	infsnz	atoi@s,f,c
  3199  001738  2A09               	incf	atoi@s+1,f,c
  3200  00173A                     l1846:
  3201  00173A  0E01               	movlw	1
  3202  00173C  6E14               	movwf	_atoi$871,c
  3203  00173E  C008  FFF6         	movff	atoi@s,tblptrl
  3204  001742  C009  FFF7         	movff	atoi@s+1,tblptrh
  3205  001746                     	if	0	;tblptru may be non-zero
  3206  001746                     	endif
  3207  001746                     	if	0	;tblptru may be non-zero
  3208  001746                     	endif
  3209  001746  0008               	tblrd		*
  3210  001748  50F5               	movf	tablat,w,c
  3211  00174A  0A20               	xorlw	32
  3212  00174C  B4D8               	btfsc	status,2,c
  3213  00174E  D018               	goto	l1854
  3214  001750  0EF7               	movlw	247
  3215  001752  6E0A               	movwf	??_atoi& (0+255),c
  3216  001754  0EFF               	movlw	255
  3217  001756  6E0B               	movwf	(??_atoi+1)& (0+255),c
  3218  001758  C008  FFF6         	movff	atoi@s,tblptrl
  3219  00175C  C009  FFF7         	movff	atoi@s+1,tblptrh
  3220  001760                     	if	0	;tblptru may be non-zero
  3221  001760                     	endif
  3222  001760                     	if	0	;tblptru may be non-zero
  3223  001760                     	endif
  3224  001760  0008               	tblrd		*
  3225  001762  50F5               	movf	tablat,w,c
  3226  001764  6E0C               	movwf	(??_atoi+2)& (0+255),c
  3227  001766  6A0D               	clrf	(??_atoi+3)& (0+255),c
  3228  001768  500A               	movf	??_atoi,w,c
  3229  00176A  260C               	addwf	??_atoi+2,f,c
  3230  00176C  500B               	movf	??_atoi+1,w,c
  3231  00176E  220D               	addwfc	??_atoi+3,f,c
  3232  001770  500D               	movf	??_atoi+3,w,c
  3233  001772  E104               	bnz	u1290
  3234  001774  0E05               	movlw	5
  3235  001776  5C0C               	subwf	??_atoi+2,w,c
  3236  001778  A0D8               	btfss	status,0,c
  3237  00177A  D002               	goto	l1854
  3238  00177C                     u1290:
  3239  00177C  0E00               	movlw	0
  3240  00177E  6E14               	movwf	_atoi$871,c
  3241  001780                     l1854:
  3242  001780  C014  F010         	movff	_atoi$871,_atoi$870
  3243  001784  6A11               	clrf	_atoi$870+1,c
  3244  001786  5010               	movf	_atoi$870,w,c
  3245  001788  1011               	iorwf	_atoi$870+1,w,c
  3246  00178A  B4D8               	btfsc	status,2,c
  3247  00178C  D008               	goto	l1864
  3248  00178E  D7D3               	goto	l1844
  3249  001790                     l1860:
  3250  001790  0E00               	movlw	0
  3251  001792  6E0F               	movwf	atoi@neg+1,c
  3252  001794  0E01               	movlw	1
  3253  001796  6E0E               	movwf	atoi@neg,c
  3254  001798                     l1862:
  3255  001798  4A08               	infsnz	atoi@s,f,c
  3256  00179A  2A09               	incf	atoi@s+1,f,c
  3257  00179C  D02E               	goto	l1870
  3258  00179E                     l1864:
  3259  00179E  C008  FFF6         	movff	atoi@s,tblptrl
  3260  0017A2  C009  FFF7         	movff	atoi@s+1,tblptrh
  3261  0017A6                     	if	0	;tblptru may be non-zero
  3262  0017A6                     	endif
  3263  0017A6                     	if	0	;tblptru may be non-zero
  3264  0017A6                     	endif
  3265  0017A6  0008               	tblrd		*
  3266  0017A8  50F5               	movf	tablat,w,c
  3267  0017AA  6E0A               	movwf	??_atoi& (0+255),c
  3268  0017AC  6A0B               	clrf	(??_atoi+1)& (0+255),c
  3269                           
  3270                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3271                           ; Switch size 1, requested type "simple"
  3272                           ; Number of cases is 1, Range of values is 0 to 0
  3273                           ; switch strategies available:
  3274                           ; Name         Instructions Cycles
  3275                           ; simple_byte            4     3 (average)
  3276                           ;	Chosen strategy is simple_byte
  3277  0017AE  500B               	movf	??_atoi+1,w,c
  3278  0017B0  0A00               	xorlw	0	; case 0
  3279  0017B2  A4D8               	btfss	status,2,c
  3280  0017B4  D022               	goto	l1870
  3281                           
  3282                           ; Switch size 1, requested type "simple"
  3283                           ; Number of cases is 2, Range of values is 43 to 45
  3284                           ; switch strategies available:
  3285                           ; Name         Instructions Cycles
  3286                           ; simple_byte            7     4 (average)
  3287                           ;	Chosen strategy is simple_byte
  3288  0017B6  500A               	movf	??_atoi,w,c
  3289  0017B8  0A2B               	xorlw	43	; case 43
  3290  0017BA  B4D8               	btfsc	status,2,c
  3291  0017BC  D7ED               	goto	l1862
  3292  0017BE  0A06               	xorlw	6	; case 45
  3293  0017C0  B4D8               	btfsc	status,2,c
  3294  0017C2  D7E6               	goto	l1860
  3295  0017C4  D01A               	goto	l1870
  3296  0017C6                     l1866:
  3297  0017C6  C015  F001         	movff	atoi@n,___wmul@multiplier
  3298  0017CA  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  3299  0017CE  0E00               	movlw	0
  3300  0017D0  6E04               	movwf	___wmul@multiplicand+1,c
  3301  0017D2  0E0A               	movlw	10
  3302  0017D4  6E03               	movwf	___wmul@multiplicand,c
  3303  0017D6  ECE9  F00F         	call	___wmul	;wreg free
  3304  0017DA  C008  FFF6         	movff	atoi@s,tblptrl
  3305  0017DE  C009  FFF7         	movff	atoi@s+1,tblptrh
  3306  0017E2                     	if	0	;tblptru may be non-zero
  3307  0017E2                     	endif
  3308  0017E2                     	if	0	;tblptru may be non-zero
  3309  0017E2                     	endif
  3310  0017E2  0008               	tblrd		*
  3311  0017E4  50F5               	movf	tablat,w,c
  3312  0017E6  5E01               	subwf	?___wmul,f,c
  3313  0017E8  0E00               	movlw	0
  3314  0017EA  5A02               	subwfb	?___wmul+1,f,c
  3315  0017EC  0E30               	movlw	48
  3316  0017EE  2401               	addwf	?___wmul,w,c
  3317  0017F0  6E15               	movwf	atoi@n,c
  3318  0017F2  0E00               	movlw	0
  3319  0017F4  2002               	addwfc	?___wmul+1,w,c
  3320  0017F6  6E16               	movwf	atoi@n+1,c
  3321  0017F8  D7CF               	goto	l1862
  3322  0017FA                     l1870:
  3323  0017FA  0ED0               	movlw	208
  3324  0017FC  6E0A               	movwf	??_atoi& (0+255),c
  3325  0017FE  0EFF               	movlw	255
  3326  001800  6E0B               	movwf	(??_atoi+1)& (0+255),c
  3327  001802  C008  FFF6         	movff	atoi@s,tblptrl
  3328  001806  C009  FFF7         	movff	atoi@s+1,tblptrh
  3329  00180A                     	if	0	;tblptru may be non-zero
  3330  00180A                     	endif
  3331  00180A                     	if	0	;tblptru may be non-zero
  3332  00180A                     	endif
  3333  00180A  0008               	tblrd		*
  3334  00180C  50F5               	movf	tablat,w,c
  3335  00180E  6E0C               	movwf	(??_atoi+2)& (0+255),c
  3336  001810  6A0D               	clrf	(??_atoi+3)& (0+255),c
  3337  001812  500A               	movf	??_atoi,w,c
  3338  001814  260C               	addwf	??_atoi+2,f,c
  3339  001816  500B               	movf	??_atoi+1,w,c
  3340  001818  220D               	addwfc	??_atoi+3,f,c
  3341  00181A  500D               	movf	??_atoi+3,w,c
  3342  00181C  E106               	bnz	u1310
  3343  00181E  0E0A               	movlw	10
  3344  001820  5C0C               	subwf	??_atoi+2,w,c
  3345  001822  B0D8               	btfsc	status,0,c
  3346  001824  D002               	goto	u1310
  3347  001826  0E01               	movlw	1
  3348  001828  D001               	goto	u1320
  3349  00182A                     u1310:
  3350  00182A  0E00               	movlw	0
  3351  00182C                     u1320:
  3352  00182C  6E12               	movwf	_atoi$872,c
  3353  00182E  6A13               	clrf	_atoi$872+1,c
  3354  001830  5012               	movf	_atoi$872,w,c
  3355  001832  1013               	iorwf	_atoi$872+1,w,c
  3356  001834  A4D8               	btfss	status,2,c
  3357  001836  D7C7               	goto	l1866
  3358  001838  500E               	movf	atoi@neg,w,c
  3359  00183A  100F               	iorwf	atoi@neg+1,w,c
  3360  00183C  A4D8               	btfss	status,2,c
  3361  00183E  D00D               	goto	l929
  3362  001840  C015  F00A         	movff	atoi@n,??_atoi
  3363  001844  C016  F00B         	movff	atoi@n+1,??_atoi+1
  3364  001848  1E0A               	comf	??_atoi,f,c
  3365  00184A  1E0B               	comf	??_atoi+1,f,c
  3366  00184C  4A0A               	infsnz	??_atoi,f,c
  3367  00184E  2A0B               	incf	??_atoi+1,f,c
  3368  001850  C00A  F008         	movff	??_atoi,?_atoi
  3369  001854  C00B  F009         	movff	??_atoi+1,?_atoi+1
  3370  001858  0012               	return	
  3371  00185A                     l929:
  3372  00185A  C015  F008         	movff	atoi@n,?_atoi
  3373  00185E  C016  F009         	movff	atoi@n+1,?_atoi+1
  3374  001862  0012               	return		;funcret
  3375  001864                     __end_of_atoi:
  3376                           	opt callstack 0
  3377                           
  3378 ;; *************** function _isspace *****************
  3379 ;; Defined at:
  3380 ;;		line 5 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/isspace.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  c               2    0[COMRAM] int 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  2    0[COMRAM] int 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3394 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3397 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;Total ram usage:        7 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		_atoi
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	text17
  3408  001E66                     __ptext17:
  3409                           	opt callstack 0
  3410  001E66                     _isspace:
  3411                           	opt callstack 24
  3412                           
  3413                           ;incstack = 0
  3414  001E66  0E01               	movlw	1
  3415  001E68  6E07               	movwf	_isspace$888,c
  3416  001E6A  0E20               	movlw	32
  3417  001E6C  1801               	xorwf	isspace@c,w,c
  3418  001E6E  1002               	iorwf	isspace@c+1,w,c
  3419  001E70  B4D8               	btfsc	status,2,c
  3420  001E72  D014               	goto	l1776
  3421  001E74  0EF7               	movlw	247
  3422  001E76  6E03               	movwf	??_isspace& (0+255),c
  3423  001E78  0EFF               	movlw	255
  3424  001E7A  6E04               	movwf	(??_isspace+1)& (0+255),c
  3425  001E7C  C001  F005         	movff	isspace@c,??_isspace+2
  3426  001E80  C002  F006         	movff	isspace@c+1,??_isspace+3
  3427  001E84  5003               	movf	??_isspace,w,c
  3428  001E86  2605               	addwf	??_isspace+2,f,c
  3429  001E88  5004               	movf	??_isspace+1,w,c
  3430  001E8A  2206               	addwfc	??_isspace+3,f,c
  3431  001E8C  5006               	movf	??_isspace+3,w,c
  3432  001E8E  E104               	bnz	u1120
  3433  001E90  0E05               	movlw	5
  3434  001E92  5C05               	subwf	??_isspace+2,w,c
  3435  001E94  A0D8               	btfss	status,0,c
  3436  001E96  D002               	goto	l1776
  3437  001E98                     u1120:
  3438  001E98  0E00               	movlw	0
  3439  001E9A  6E07               	movwf	_isspace$888,c
  3440  001E9C                     l1776:
  3441  001E9C  C007  F001         	movff	_isspace$888,?_isspace
  3442  001EA0  6A02               	clrf	?_isspace+1,c
  3443  001EA2  0012               	return		;funcret
  3444  001EA4                     __end_of_isspace:
  3445                           	opt callstack 0
  3446                           
  3447 ;; *************** function _isdigit *****************
  3448 ;; Defined at:
  3449 ;;		line 5 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/isdigit.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;  c               2    0[COMRAM] int 
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;		None
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  2    0[COMRAM] int 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3463 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;Total ram usage:        6 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; This function calls:
  3470 ;;		Nothing
  3471 ;; This function is called by:
  3472 ;;		_vfpfcnvrt
  3473 ;;		_atoi
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text18
  3478  001F78                     __ptext18:
  3479                           	opt callstack 0
  3480  001F78                     _isdigit:
  3481                           	opt callstack 25
  3482                           
  3483                           ;incstack = 0
  3484  001F78  0ED0               	movlw	208
  3485  001F7A  6E03               	movwf	??_isdigit& (0+255),c
  3486  001F7C  0EFF               	movlw	255
  3487  001F7E  6E04               	movwf	(??_isdigit+1)& (0+255),c
  3488  001F80  C001  F005         	movff	isdigit@c,??_isdigit+2
  3489  001F84  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  3490  001F88  5003               	movf	??_isdigit,w,c
  3491  001F8A  2605               	addwf	??_isdigit+2,f,c
  3492  001F8C  5004               	movf	??_isdigit+1,w,c
  3493  001F8E  2206               	addwfc	??_isdigit+3,f,c
  3494  001F90  5006               	movf	??_isdigit+3,w,c
  3495  001F92  E106               	bnz	u960
  3496  001F94  0E0A               	movlw	10
  3497  001F96  5C05               	subwf	??_isdigit+2,w,c
  3498  001F98  B0D8               	btfsc	status,0,c
  3499  001F9A  D002               	goto	u960
  3500  001F9C  0E01               	movlw	1
  3501  001F9E  D001               	goto	u970
  3502  001FA0                     u960:
  3503  001FA0  0E00               	movlw	0
  3504  001FA2                     u970:
  3505  001FA2  6E01               	movwf	?_isdigit,c
  3506  001FA4  6A02               	clrf	?_isdigit+1,c
  3507  001FA6  0012               	return		;funcret
  3508  001FA8                     __end_of_isdigit:
  3509                           	opt callstack 0
  3510                           
  3511 ;; *************** function ___wmul *****************
  3512 ;; Defined at:
  3513 ;;		line 15 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/Umul16.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  multiplier      2    0[COMRAM] unsigned int 
  3516 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  product         2    4[COMRAM] unsigned int 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  2    0[COMRAM] unsigned int 
  3521 ;; Registers used:
  3522 ;;		wreg, status,2, status,0, prodl, prodh
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3528 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;Total ram usage:        6 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_atoi
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           	psect	text19
  3542  001FD2                     __ptext19:
  3543                           	opt callstack 0
  3544  001FD2                     ___wmul:
  3545                           	opt callstack 24
  3546                           
  3547                           ;incstack = 0
  3548  001FD2  5001               	movf	___wmul@multiplier,w,c
  3549  001FD4  0203               	mulwf	___wmul@multiplicand,c
  3550  001FD6  CFF3 F005          	movff	prodl,___wmul@product
  3551  001FDA  CFF4 F006          	movff	prodh,___wmul@product+1
  3552  001FDE  5001               	movf	___wmul@multiplier,w,c
  3553  001FE0  0204               	mulwf	___wmul@multiplicand+1,c
  3554  001FE2  50F3               	movf	prodl,w,c
  3555  001FE4  2606               	addwf	___wmul@product+1,f,c
  3556  001FE6  5002               	movf	___wmul@multiplier+1,w,c
  3557  001FE8  0203               	mulwf	___wmul@multiplicand,c
  3558  001FEA  50F3               	movf	prodl,w,c
  3559  001FEC  2606               	addwf	___wmul@product+1,f,c
  3560  001FEE  C005  F001         	movff	___wmul@product,?___wmul
  3561  001FF2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3562  001FF6  0012               	return		;funcret
  3563  001FF8                     __end_of___wmul:
  3564                           	opt callstack 0
  3565                           
  3566 ;; *************** function _lcd_str *****************
  3567 ;; Defined at:
  3568 ;;		line 156 in file "main.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  str             2    2[COMRAM] PTR unsigned char 
  3571 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  3572 ;;		 -> STR_7(20), STR_6(21), time@buffer(32), STR_4(23), 
  3573 ;;		 -> STR_3(22), STR_2(16), count@buffer(32), 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  i               1    6[COMRAM] unsigned char 
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3589 ;;Total ram usage:        5 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    2
  3592 ;; This function calls:
  3593 ;;		_lcd_dat
  3594 ;; This function is called by:
  3595 ;;		_count
  3596 ;;		_time
  3597 ;;		_moc
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text20
  3602  001CFA                     __ptext20:
  3603                           	opt callstack 0
  3604  001CFA                     _lcd_str:
  3605                           	opt callstack 26
  3606                           
  3607                           ;main.c: 156: void lcd_str(char* str);main.c: 157: {;main.c: 158:  unsigned char i=0;
  3608                           
  3609                           ;incstack = 0
  3610  001CFA  0E00               	movlw	0
  3611  001CFC  6E07               	movwf	lcd_str@i,c
  3612                           
  3613                           ;main.c: 160:  while(str[i] != 0 )
  3614  001CFE  D01A               	goto	l2032
  3615  001D00                     l2028:
  3616                           
  3617                           ;main.c: 161:  {;main.c: 162:    lcd_dat(str[i]);
  3618  001D00  5007               	movf	lcd_str@i,w,c
  3619  001D02  2403               	addwf	lcd_str@str,w,c
  3620  001D04  6E05               	movwf	??_lcd_str& (0+255),c
  3621  001D06  0E00               	movlw	0
  3622  001D08  2004               	addwfc	lcd_str@str+1,w,c
  3623  001D0A  6E06               	movwf	(??_lcd_str+1)& (0+255),c
  3624  001D0C  C005  FFF6         	movff	??_lcd_str,tblptrl
  3625  001D10  C006  FFF7         	movff	??_lcd_str+1,tblptrh
  3626  001D14  0E00               	movlw	low (__smallconst shr (0+16))
  3627  001D16  6EF8               	movwf	tblptru,c
  3628  001D18  0E0F               	movlw	(high __ramtop+-1)
  3629  001D1A  64F7               	cpfsgt	tblptrh,c
  3630  001D1C  D003               	bra	u1497
  3631  001D1E  0008               	tblrd		*
  3632  001D20  50F5               	movf	tablat,w,c
  3633  001D22  D005               	bra	u1490
  3634  001D24                     u1497:
  3635  001D24  CFF6 FFE1          	movff	tblptrl,fsr1l
  3636  001D28  CFF7 FFE2          	movff	tblptrh,fsr1h
  3637  001D2C  50E7               	movf	indf1,w,c
  3638  001D2E                     u1490:
  3639  001D2E  EC0D  F010         	call	_lcd_dat
  3640                           
  3641                           ;main.c: 163:    i++;
  3642  001D32  2A07               	incf	lcd_str@i,f,c
  3643  001D34                     l2032:
  3644                           
  3645                           ;main.c: 160:  while(str[i] != 0 )
  3646  001D34  5007               	movf	lcd_str@i,w,c
  3647  001D36  2403               	addwf	lcd_str@str,w,c
  3648  001D38  6E05               	movwf	??_lcd_str& (0+255),c
  3649  001D3A  0E00               	movlw	0
  3650  001D3C  2004               	addwfc	lcd_str@str+1,w,c
  3651  001D3E  6E06               	movwf	(??_lcd_str+1)& (0+255),c
  3652  001D40  C005  FFF6         	movff	??_lcd_str,tblptrl
  3653  001D44  C006  FFF7         	movff	??_lcd_str+1,tblptrh
  3654  001D48  0E00               	movlw	low (__smallconst shr (0+16))
  3655  001D4A  6EF8               	movwf	tblptru,c
  3656  001D4C  0E0F               	movlw	(high __ramtop+-1)
  3657  001D4E  64F7               	cpfsgt	tblptrh,c
  3658  001D50  D003               	bra	u1507
  3659  001D52  0008               	tblrd		*
  3660  001D54  50F5               	movf	tablat,w,c
  3661  001D56  D005               	bra	u1500
  3662  001D58                     u1507:
  3663  001D58  CFF6 FFE1          	movff	tblptrl,fsr1l
  3664  001D5C  CFF7 FFE2          	movff	tblptrh,fsr1h
  3665  001D60  50E7               	movf	indf1,w,c
  3666  001D62                     u1500:
  3667  001D62  0900               	iorlw	0
  3668  001D64  B4D8               	btfsc	status,2,c
  3669  001D66  0012               	return	
  3670  001D68  D7CB               	goto	l2028
  3671  001D6A                     __end_of_lcd_str:
  3672                           	opt callstack 0
  3673                           
  3674 ;; *************** function _lcd_dat *****************
  3675 ;; Defined at:
  3676 ;;		line 125 in file "main.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  val             1    wreg     unsigned char 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  val             1    1[COMRAM] unsigned char 
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  1    wreg      void 
  3683 ;; Registers used:
  3684 ;;		wreg, status,2, cstack
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;Total ram usage:        1 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:    1
  3697 ;; This function calls:
  3698 ;;		_lcd_wr
  3699 ;; This function is called by:
  3700 ;;		_lcd_str
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           	psect	text21
  3705  00201A                     __ptext21:
  3706                           	opt callstack 0
  3707  00201A                     _lcd_dat:
  3708                           	opt callstack 26
  3709                           
  3710                           ;incstack = 0
  3711                           ;lcd_dat@val stored from wreg
  3712  00201A  6E02               	movwf	lcd_dat@val,c
  3713                           
  3714                           ;main.c: 125: void lcd_dat(unsigned char val);main.c: 126: {;main.c: 127:  PORTEbits.RE1
      +                          =1;
  3715  00201C  8284               	bsf	3972,1,c	;volatile
  3716                           
  3717                           ;main.c: 128:         lcd_wr(val);
  3718  00201E  5002               	movf	lcd_dat@val,w,c
  3719  002020  EC1F  F010         	call	_lcd_wr
  3720                           
  3721                           ;main.c: 129:         PORTEbits.RE2=1;
  3722  002024  8484               	bsf	3972,2,c	;volatile
  3723                           
  3724                           ;main.c: 131:         PORTEbits.RE1=0;
  3725  002026  9284               	bcf	3972,1,c	;volatile
  3726                           
  3727                           ;main.c: 133:  PORTEbits.RE1=1;
  3728  002028  8284               	bsf	3972,1,c	;volatile
  3729  00202A  0012               	return		;funcret
  3730  00202C                     __end_of_lcd_dat:
  3731                           	opt callstack 0
  3732                           
  3733 ;; *************** function _lcd_init *****************
  3734 ;; Defined at:
  3735 ;;		line 136 in file "main.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;		None
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;		None
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      void 
  3742 ;; Registers used:
  3743 ;;		wreg, status,2, status,0, cstack
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;Total ram usage:        0 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:    2
  3756 ;; This function calls:
  3757 ;;		_delay
  3758 ;;		_lcd_cmd
  3759 ;; This function is called by:
  3760 ;;		_main
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           	psect	text22
  3765  001D6A                     __ptext22:
  3766                           	opt callstack 0
  3767  001D6A                     _lcd_init:
  3768                           	opt callstack 28
  3769                           
  3770                           ;main.c: 138:  PORTEbits.RE1=0;
  3771                           
  3772                           ;incstack = 0
  3773  001D6A  9284               	bcf	3972,1,c	;volatile
  3774                           
  3775                           ;main.c: 139:  PORTEbits.RE2=0;
  3776  001D6C  9484               	bcf	3972,2,c	;volatile
  3777                           
  3778                           ;main.c: 140:  delay(20);
  3779  001D6E  0E00               	movlw	0
  3780  001D70  6E02               	movwf	delay@ms+1,c
  3781  001D72  0E14               	movlw	20
  3782  001D74  6E01               	movwf	delay@ms,c
  3783  001D76  ECA3  F00F         	call	_delay	;wreg free
  3784                           
  3785                           ;main.c: 141:  PORTEbits.RE1=1;
  3786  001D7A  8284               	bsf	3972,1,c	;volatile
  3787                           
  3788                           ;main.c: 144:  lcd_cmd(0x38);
  3789  001D7C  0E38               	movlw	56
  3790  001D7E  EC16  F010         	call	_lcd_cmd
  3791                           
  3792                           ;main.c: 145:  delay(5);
  3793  001D82  0E00               	movlw	0
  3794  001D84  6E02               	movwf	delay@ms+1,c
  3795  001D86  0E05               	movlw	5
  3796  001D88  6E01               	movwf	delay@ms,c
  3797  001D8A  ECA3  F00F         	call	_delay	;wreg free
  3798                           
  3799                           ;main.c: 146:  lcd_cmd(0x38);
  3800  001D8E  0E38               	movlw	56
  3801  001D90  EC16  F010         	call	_lcd_cmd
  3802                           
  3803                           ;main.c: 147:         delay(1);
  3804  001D94  0E00               	movlw	0
  3805  001D96  6E02               	movwf	delay@ms+1,c
  3806  001D98  0E01               	movlw	1
  3807  001D9A  6E01               	movwf	delay@ms,c
  3808  001D9C  ECA3  F00F         	call	_delay	;wreg free
  3809                           
  3810                           ;main.c: 148:  lcd_cmd(0x38);
  3811  001DA0  0E38               	movlw	56
  3812  001DA2  EC16  F010         	call	_lcd_cmd
  3813                           
  3814                           ;main.c: 149:  lcd_cmd(0x08);
  3815  001DA6  0E08               	movlw	8
  3816  001DA8  EC16  F010         	call	_lcd_cmd
  3817                           
  3818                           ;main.c: 150:  lcd_cmd(0x0F);
  3819  001DAC  0E0F               	movlw	15
  3820  001DAE  EC16  F010         	call	_lcd_cmd
  3821                           
  3822                           ;main.c: 151:  lcd_cmd(0x01);
  3823  001DB2  0E01               	movlw	1
  3824  001DB4  EC16  F010         	call	_lcd_cmd
  3825                           
  3826                           ;main.c: 152:  lcd_cmd(0x38);
  3827  001DB8  0E38               	movlw	56
  3828  001DBA  EC16  F010         	call	_lcd_cmd
  3829                           
  3830                           ;main.c: 153:         lcd_cmd(0x80);
  3831  001DBE  0E80               	movlw	128
  3832  001DC0  EC16  F010         	call	_lcd_cmd
  3833  001DC4  0012               	return		;funcret
  3834  001DC6                     __end_of_lcd_init:
  3835                           	opt callstack 0
  3836                           
  3837 ;; *************** function _lcd_cmd *****************
  3838 ;; Defined at:
  3839 ;;		line 114 in file "main.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  val             1    wreg     unsigned char 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  val             1    1[COMRAM] unsigned char 
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  1    wreg      void 
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, cstack
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;Total ram usage:        1 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:    1
  3860 ;; This function calls:
  3861 ;;		_lcd_wr
  3862 ;; This function is called by:
  3863 ;;		_lcd_init
  3864 ;;		_count
  3865 ;;		_time
  3866 ;;		_moc
  3867 ;;		_main
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           	psect	text23
  3872  00202C                     __ptext23:
  3873                           	opt callstack 0
  3874  00202C                     _lcd_cmd:
  3875                           	opt callstack 27
  3876                           
  3877                           ;incstack = 0
  3878                           ;lcd_cmd@val stored from wreg
  3879  00202C  6E02               	movwf	lcd_cmd@val,c
  3880                           
  3881                           ;main.c: 114: void lcd_cmd(unsigned char val);main.c: 115: {;main.c: 116:  PORTEbits.RE1
      +                          =1;
  3882  00202E  8284               	bsf	3972,1,c	;volatile
  3883                           
  3884                           ;main.c: 117:         lcd_wr(val);
  3885  002030  5002               	movf	lcd_cmd@val,w,c
  3886  002032  EC1F  F010         	call	_lcd_wr
  3887                           
  3888                           ;main.c: 118:         PORTEbits.RE2=0;
  3889  002036  9484               	bcf	3972,2,c	;volatile
  3890                           
  3891                           ;main.c: 120:         PORTEbits.RE1=0;
  3892  002038  9284               	bcf	3972,1,c	;volatile
  3893                           
  3894                           ;main.c: 122:  PORTEbits.RE1=1;
  3895  00203A  8284               	bsf	3972,1,c	;volatile
  3896  00203C  0012               	return		;funcret
  3897  00203E                     __end_of_lcd_cmd:
  3898                           	opt callstack 0
  3899                           
  3900 ;; *************** function _lcd_wr *****************
  3901 ;; Defined at:
  3902 ;;		line 109 in file "main.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;  val             1    wreg     unsigned char 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  val             1    0[COMRAM] unsigned char 
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		wreg
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;Total ram usage:        1 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; This function calls:
  3923 ;;		Nothing
  3924 ;; This function is called by:
  3925 ;;		_lcd_cmd
  3926 ;;		_lcd_dat
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text24
  3931  00203E                     __ptext24:
  3932                           	opt callstack 0
  3933  00203E                     _lcd_wr:
  3934                           	opt callstack 26
  3935                           
  3936                           ;incstack = 0
  3937                           ;lcd_wr@val stored from wreg
  3938  00203E  6E01               	movwf	lcd_wr@val,c
  3939                           
  3940                           ;main.c: 109: void lcd_wr(unsigned char val);main.c: 110: {;main.c: 111:   PORTD=val;
  3941  002040  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  3942  002044  0012               	return		;funcret
  3943  002046                     __end_of_lcd_wr:
  3944                           	opt callstack 0
  3945                           
  3946 ;; *************** function _delay *****************
  3947 ;; Defined at:
  3948 ;;		line 75 in file "main.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  ms              2    0[COMRAM] unsigned int 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  i               2    2[COMRAM] unsigned int 
  3953 ;;  j               1    4[COMRAM] unsigned char 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3963 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;Total ram usage:        5 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_lcd_init
  3973 ;;		_count
  3974 ;;		_time
  3975 ;;		_moc
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text25
  3980  001F46                     __ptext25:
  3981                           	opt callstack 0
  3982  001F46                     _delay:
  3983                           	opt callstack 28
  3984                           
  3985                           ;main.c: 75: void delay(unsigned int ms);main.c: 76: {;main.c: 77:     unsigned int i;;m
      +                          ain.c: 78:     unsigned char j;;main.c: 80:  for (i =0; i< ms; i++)
  3986                           
  3987                           ;incstack = 0
  3988  001F46  0E00               	movlw	0
  3989  001F48  6E04               	movwf	delay@i+1,c
  3990  001F4A  0E00               	movlw	0
  3991  001F4C  6E03               	movwf	delay@i,c
  3992  001F4E  D00D               	goto	l2014
  3993  001F50                     l2002:
  3994                           
  3995                           ;main.c: 81:  {;main.c: 83:   for (j =0 ; j < 200; j++)
  3996  001F50  0E00               	movlw	0
  3997  001F52  6E05               	movwf	delay@j,c
  3998  001F54                     l37:
  3999                           
  4000                           ;main.c: 84:    {;main.c: 85:       __nop();
  4001  001F54  F000               	nop	
  4002                           
  4003                           ;main.c: 86:       __nop();
  4004  001F56  F000               	nop	
  4005                           
  4006                           ;main.c: 87:       __nop();
  4007  001F58  F000               	nop	
  4008                           
  4009                           ;main.c: 88:       __nop();
  4010  001F5A  F000               	nop	
  4011                           
  4012                           ;main.c: 89:       __nop();
  4013  001F5C  F000               	nop	
  4014                           
  4015                           ;main.c: 90:    }
  4016  001F5E  2A05               	incf	delay@j,f,c
  4017  001F60  0EC7               	movlw	199
  4018  001F62  6405               	cpfsgt	delay@j,c
  4019  001F64  D7F7               	goto	l37
  4020                           
  4021                           ;main.c: 91:  }
  4022  001F66  4A03               	infsnz	delay@i,f,c
  4023  001F68  2A04               	incf	delay@i+1,f,c
  4024  001F6A                     l2014:
  4025  001F6A  5001               	movf	delay@ms,w,c
  4026  001F6C  5C03               	subwf	delay@i,w,c
  4027  001F6E  5002               	movf	delay@ms+1,w,c
  4028  001F70  5804               	subwfb	delay@i+1,w,c
  4029  001F72  B0D8               	btfsc	status,0,c
  4030  001F74  0012               	return	
  4031  001F76  D7EC               	goto	l2002
  4032  001F78                     __end_of_delay:
  4033                           	opt callstack 0
  4034                           
  4035                           	psect	rparam
  4036  0000                     tosu	equ	0xFFF
  4037                           tosh	equ	0xFFE
  4038                           tosl	equ	0xFFD
  4039                           stkptr	equ	0xFFC
  4040                           pclatu	equ	0xFFB
  4041                           pclath	equ	0xFFA
  4042                           pcl	equ	0xFF9
  4043                           tblptru	equ	0xFF8
  4044                           tblptrh	equ	0xFF7
  4045                           tblptrl	equ	0xFF6
  4046                           tablat	equ	0xFF5
  4047                           prodh	equ	0xFF4
  4048                           prodl	equ	0xFF3
  4049                           indf0	equ	0xFEF
  4050                           postinc0	equ	0xFEE
  4051                           postdec0	equ	0xFED
  4052                           preinc0	equ	0xFEC
  4053                           plusw0	equ	0xFEB
  4054                           fsr0h	equ	0xFEA
  4055                           fsr0l	equ	0xFE9
  4056                           wreg	equ	0xFE8
  4057                           indf1	equ	0xFE7
  4058                           postinc1	equ	0xFE6
  4059                           postdec1	equ	0xFE5
  4060                           preinc1	equ	0xFE4
  4061                           plusw1	equ	0xFE3
  4062                           fsr1h	equ	0xFE2
  4063                           fsr1l	equ	0xFE1
  4064                           bsr	equ	0xFE0
  4065                           indf2	equ	0xFDF
  4066                           postinc2	equ	0xFDE
  4067                           postdec2	equ	0xFDD
  4068                           preinc2	equ	0xFDC
  4069                           plusw2	equ	0xFDB
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8


Data Sizes:
    Strings     196
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    115     123
    BANK0           128     68     100
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[26]), STR_1(CODE[26]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 32
		 -> time@buffer(BANK0[32]), count@buffer(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 32
		 -> time@buffer(BANK0[32]), count@buffer(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S892_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 32
		 -> time@buffer(BANK0[32]), count@buffer(BANK0[32]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 32
		 -> time@buffer(BANK0[32]), count@buffer(BANK0[32]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[26]), STR_1(CODE[26]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[26]), STR_1(CODE[26]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[26]), STR_1(CODE[26]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_str@str	PTR unsigned char  size(2) Largest target is 32
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[20]), STR_6(CODE[21]), time@buffer(BANK0[32]), STR_4(CODE[23]), 
		 -> STR_3(CODE[22]), STR_2(CODE[16]), count@buffer(BANK0[32]), 


Critical Paths under _main in COMRAM

    _time->_count
    _count->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_str->_lcd_dat
    _lcd_dat->_lcd_wr
    _lcd_init->_delay
    _lcd_cmd->_lcd_wr

Critical Paths under _main in BANK0

    _moc->_time
    _time->_count

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   23906
                            _lcd_cmd
                           _lcd_init
                                _moc
 ---------------------------------------------------------------------------------
 (1) _moc                                                  0     0      0   22966
                              _delay
                            _lcd_cmd
                            _lcd_str
                               _time
 ---------------------------------------------------------------------------------
 (2) _time                                                36    36      0   21100
                                             32 BANK0     36    36      0
                              _count
                              _delay
                            _lcd_cmd
                            _lcd_str
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _count                                               36    32      4   10625
                                            111 COMRAM     4     0      4
                                              0 BANK0     32    32      0
                              _delay
                            _lcd_cmd
                            _lcd_str
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18    10      8    8444
                                             93 COMRAM    18    10      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     2      6    7939
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           46    40      6    7566
                                             63 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (8) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (7) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (6) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (7) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _lcd_str                                              5     3      2     970
                                              2 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (4) _lcd_dat                                              1     1      0      44
                                              1 COMRAM     1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     896
                              _delay
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              1     1      0      44
                                              1 COMRAM     1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (5) _lcd_wr                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2     852
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_cmd
     _lcd_wr
   _lcd_init
     _delay
     _lcd_cmd
       _lcd_wr
   _moc
     _delay
     _lcd_cmd
       _lcd_wr
     _lcd_str
       _lcd_dat
         _lcd_wr
     _time
       _count
         _delay
         _lcd_cmd
           _lcd_wr
         _lcd_str
           _lcd_dat
             _lcd_wr
         _sprintf
           _vfprintf
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _putch
                   _fputs
                     _fputc
                       _putch
                   _strlen
               _fputc
                 _putch
               _isdigit
       _delay
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
             _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     44      64       5       78.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     73      7B       1       96.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DF      34        0.0%
DATA                 0      0      DF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu May 21 18:23:52 2020

                     l37 1F54      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l153 1C92                      l164 140C  
                    l166 1414                      l929 185A                      l898 1F3C  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u860 1BD4  
                    u950 1F22                      u960 1FA0                      u880 1C1C  
                    u970 1FA2                      _abs 1F14                      _pad 1C64  
                    _moc 1988                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l2002 1F50                     ?_abs 0013  
                   l2014 1F6A                     l2032 1D34                     l2104 1B9C  
                   l2028 1D00                     l2108 1BAA                     l2046 1A52  
                   l2150 19CC                     l2082 1B1E                     l2162 19F8  
                   l2068 1AC4                     l1710 166A                     l1702 1630  
                   l2086 1B38                     l2174 1A24                     l1720 16C6  
                   l1640 1EFC                     l1800 142E                     l2192 1ED0  
                   l1626 1BDC                     l2194 1ED4                     l1708 1656  
                   l1724 16DC                     l1740 1890                     l1636 1EE6  
                   l1644 1FB2                     l1660 1C8A                     l1804 143E  
                   l1900 111C                     l1750 18E2                     l1646 1FB6  
                   l1670 1CE0                     l1662 1C9C                     l1814 1536  
                   l1728 1702                     l1760 1940                     l1744 18B4  
                   l1656 1C7C                     l1920 1136                     l1912 1128  
                   l1904 1120                     l1666 1CB4                     l1834 159A  
                   l1922 1178                     l1860 1790                     l1844 1736  
                   l1764 1966                     l1756 192A                     l1748 18CE  
                   l1916 112C                     l1908 1124                     l1870 17FA  
                   l1862 1798                     l1854 1780                     l1846 173A  
                   l1838 15B2                     l1934 11E4                     l1776 1E9C  
                   l1864 179E                     l1696 1608                     l1960 1344  
                   l1936 1202                     l1866 17C6                     l1786 13F0  
                   l1954 1308                     l1938 1210                     l1970 1366  
                   l1964 134E                     ?_pad 0011                     l1896 110A  
                   l1898 110C                     l1996 1DD8                     l1998 1DFC  
                   ?_moc 0001                     STR_1 1001                     STR_2 10B5  
                   STR_3 1032                     STR_4 101B                     STR_5 1001  
                   STR_6 1048                     STR_7 105D                     STR_8 1093  
                   STR_9 1082                     u1001 1636                     u1020 166E  
                   u1120 1E98                     u1200 1544                     u1130 13C2  
                   u1220 1566                     u1140 13C4                     u1221 1564  
                   u1310 182A                     u1230 1574                     u1320 182C  
                   u1080 18E6                     u1240 1578                     u1400 1248  
                   u1170 1402                     u1410 124A                     u1500 1D62  
                   u1260 1584                     u1420 1256                     u1190 1428  
                   u1440 128A                     u1290 177C                     u1507 1D58  
                   u1540 1AD4                     u1550 1B30                     u1490 1D2E  
                   u1497 1D24             __CFG_PWRT$ON 000000                     abs@a 0013  
                   _dbuf 00C4                     _atoi 1724                     _main 1EA4  
                   _dtoa 139A                     _prec 0078                     _time 1B0C  
                   _nout 0074                     pad@i 0018                     pad@p 0015  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001A  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_abs 0015                    ??_pad 0017  
                  ??_moc 0074          __end_of___aodiv 1724                    ?_atoi 0008  
                  ?_main 0001                    ?_dtoa 001C          __end_of___aomod 1988  
                  STR_10 10A4                    STR_11 1071                    ?_time 0001  
           vfpfcnvrt@fmt 0042                    _PORTD 000F83                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_lcd_dat 202C          __end_of_lcd_cmd 203E  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000          __end_of_lcd_str 1D6A  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _delay 1F46  
                  _flags 007A                    _count 1A50                    _fputc 1BC4  
                  _fputs 1EDC          __end_of_isdigit 1FA8                    atoi@n 0015  
                  pad@fp 0011                    atoi@s 0008                    _width 0076  
            count@buffer 0080                    _putch 2046                    dtoa@d 001E  
                  dtoa@i 003E                    dtoa@n 0036                    dtoa@p 0030  
                  dtoa@s 0034                    dtoa@w 0032          __end_of_isspace 1EA4  
         __CFG_BOREN$OFF 000000                    tablat 000FF5                    time@a 00C0  
                  time@b 00C2                    status 000FD8          __end_of_sprintf 1E66  
        __initialization 1FF8             __end_of_atoi 1864             __end_of_main 1EDC  
           __end_of_dtoa 15DC             __end_of_time 1BC4           __CFG_OSC$HSPLL 000000  
                 ??_atoi 000A                   ??_main 0074                   ??_dtoa 0026  
                 ??_time 0074            __activetblptr 000002                   ?_delay 0001  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 ?_count 0070                   ?_fputc 0001                   ?_fputs 000A  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   ?_putch 0001  
          vfpfcnvrt@done 0052           __CFG_XINST$OFF 000000             vfprintf@cfmt 005C  
       __end_of_lcd_init 1DC6                ??___aodiv 0011                ??___aomod 0011  
                 ___wmul 1FD2                   _lcd_wr 203E                   delay@i 0003  
                 delay@j 0005                   clear_0 1FFE                   clear_1 200A  
                 pad@buf 0013                ??_lcd_dat 0002                ??_lcd_cmd 0002  
                 dtoa@fp 001C                   _strlen 1FA8                ??_lcd_str 0005  
                 count@a 0070                   count@b 0072                   fputc@c 0001  
                 fputs@c 000E                   fputs@i 000F                   fputs@s 000A  
              ??_isdigit 0003             __mediumconst 0000                ??_isspace 0003  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 putch@c 0001         __end_of_vfprintf 1E18                ??_sprintf 0066  
             __accesstop 0080  __end_of__initialization 2010          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_delay 1F78  
          __end_of_count 1B0C            __end_of_fputc 1C64            __end_of_fputs 1F14  
          __end_of_putch 2048                  ??_delay 0003                  ??_count 0074  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 00C4                  ?___wmul 0001                  ?_lcd_wr 0001  
                ?_strlen 0001       __size_of_vfpfcnvrt 02D4                ?_lcd_init 0001  
                __Hparam 0000                  __Lparam 0000                  ___aodiv 15DC  
                ___aomod 1864          __size_of___wmul 0026                ?_vfprintf 0056  
           __psmallconst 1000          __size_of_lcd_wr 0008          __CFG_STVREN$OFF 000000  
                __pcinit 1FF8                  __ramtop 1000                  __ptext0 1EA4  
                __ptext1 1988                  __ptext2 1B0C                  __ptext3 1A50  
                __ptext4 1E18                  __ptext5 1DC6                  __ptext6 10C6  
                __ptext7 139A                  __ptext8 1C64                  __ptext9 1FA8  
                _lcd_dat 201A                  _lcd_cmd 202C                  _lcd_str 1CFA  
        __size_of_strlen 002A             __size_of_abs 0032             __size_of_pad 0096  
           __size_of_moc 00C8                  _isdigit 1F78                  delay@ms 0001  
                _isspace 1E66                  atoi@neg 000E                  _sprintf 1E18  
             ??_lcd_init 0006     end_of_initialization 2010                  fputc@fp 0003  
          __Lmediumconst 0000                  fputs@fp 000C        __end_of_vfpfcnvrt 139A  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 005C                  strlen@a 0003  
                strlen@s 0001                _PORTBbits 000F81                _PORTEbits 000F84  
             lcd_dat@val 0002               lcd_cmd@val 0002               lcd_str@str 0003  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 004A  
         __end_of___wmul 1FF8           __end_of_lcd_wr 2046           __end_of_strlen 1FD2  
    start_initialization 1FF8              __end_of_abs 1F46              __end_of_pad 1CFA  
            __end_of_moc 1A50              vfprintf@fmt 0058                 ??___wmul 0005  
               ??_lcd_wr 0001         __CFG_LPT1OSC$OFF 000000                 ??_strlen 0003  
            __pbssCOMRAM 0074            __pcstackBANK0 0080         ___aodiv@dividend 0001  
      __size_of_lcd_init 005C        __CFG_CCP2MX$PORTC 000000                 ?___aodiv 0001  
               ?___aomod 0001         ___aodiv@quotient 0013                 ?_lcd_dat 0001  
               ?_lcd_cmd 0001        __size_of_vfprintf 0052                 ?_lcd_str 0003  
            __smallconst 1000                 ?_isdigit 0001                 ?_isspace 0001  
             time@buffer 00A0           __size_of_delay 0032                 ?_sprintf 005E  
         __size_of_count 00BC           __size_of_fputc 00A0           __size_of_fputs 0038  
         __size_of_putch 0002           ___wmul@product 0005         __CFG_WDTPS$32768 000000  
              _vfpfcnvrt 10C6               _ADCON0bits 000FC2        ___wmul@multiplier 0001  
              lcd_wr@val 0001                 __Hrparam 0000               vfprintf@ap 005A  
               __Lrparam 0000               vfprintf@fp 0056         __size_of___aodiv 0148  
       __size_of___aomod 0124               ?_vfpfcnvrt 0040          ___aodiv@divisor 0009  
        ___aodiv@counter 0011         __size_of_lcd_dat 0012         __size_of_lcd_cmd 0012  
             sprintf@fmt 0060         __size_of_lcd_str 0070                 _atoi$870 0010  
               _atoi$871 0014                 _atoi$872 0012         __size_of_isdigit 0030  
               _dtoa$398 002E         __size_of_isspace 003E                 __ptext10 1EDC  
               __ptext11 1BC4                 __ptext20 1CFA                 __ptext12 2046  
               __ptext21 201A                 __ptext13 1F14                 __ptext22 1D6A  
               __ptext14 1864                 __ptext23 202C                 __ptext15 15DC  
               __ptext24 203E                 __ptext16 1724                 __ptext25 1F46  
               __ptext17 1E66                 __ptext18 1F78                 __ptext19 1FD2  
               _lcd_init 1D6A         __size_of_sprintf 004E            __size_of_atoi 0140  
          __size_of_main 0038            __size_of_dtoa 0242            __size_of_time 00B8  
               _vfprintf 1DC6                 lcd_str@i 0007              _isspace$888 0007  
       ___aomod@dividend 0001                 isdigit@c 0001                sprintf@ap 0068  
               isspace@c 0001          ___aomod@divisor 0009              ??_vfpfcnvrt 0046  
          _vfpfcnvrt$413 0054          ___aomod@counter 0011                 sprintf@f 006A  
               sprintf@s 005E             ___aodiv@sign 0012             ___aomod@sign 0012  
